
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model UserAccount
 * 
 */
export type UserAccount = {
  userId: string
  userName: string
  groupId: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model GroupAccount
 * 
 */
export type GroupAccount = {
  groupId: string
  groupPass: string
  groupName: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model ContributionInfo
 * 
 */
export type ContributionInfo = {
  contributionId: number
  groupId: string
  userId: string
  materialName: string
  category: string
  composition1: string | null
  compositionRatio1: number | null
  composition2: string | null
  compositionRatio2: number | null
  composition3: string | null
  compositionRatio3: number | null
  fabricStructure: string | null
  color: string | null
  pattern: string | null
  processing: string | null
  unitPrice: number | null
  supplier: string | null
  comment: string | null
  isDeleted: boolean
  createdAt: Date
  updatedAt: Date
}

/**
 * Model ContributionImage
 * 
 */
export type ContributionImage = {
  contributionId: number
  imageName1: string
  imageName2: string | null
  imageName3: string | null
  imageName4: string | null
  imageName5: string | null
  createdAt: Date
  updatedAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more UserAccounts
 * const userAccounts = await prisma.userAccount.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more UserAccounts
   * const userAccounts = await prisma.userAccount.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Omit<PrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>) => Promise<R>, options?: { maxWait?: number, timeout?: number }): Promise<R>;

      /**
   * `prisma.userAccount`: Exposes CRUD operations for the **UserAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAccounts
    * const userAccounts = await prisma.userAccount.findMany()
    * ```
    */
  get userAccount(): Prisma.UserAccountDelegate<GlobalReject>;

  /**
   * `prisma.groupAccount`: Exposes CRUD operations for the **GroupAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupAccounts
    * const groupAccounts = await prisma.groupAccount.findMany()
    * ```
    */
  get groupAccount(): Prisma.GroupAccountDelegate<GlobalReject>;

  /**
   * `prisma.contributionInfo`: Exposes CRUD operations for the **ContributionInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContributionInfos
    * const contributionInfos = await prisma.contributionInfo.findMany()
    * ```
    */
  get contributionInfo(): Prisma.ContributionInfoDelegate<GlobalReject>;

  /**
   * `prisma.contributionImage`: Exposes CRUD operations for the **ContributionImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContributionImages
    * const contributionImages = await prisma.contributionImage.findMany()
    * ```
    */
  get contributionImage(): Prisma.ContributionImageDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.6.0
   * Query Engine version: dc520b92b1ebb2d28dc3161f9f82e875bd35d727
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    UserAccount: 'UserAccount',
    GroupAccount: 'GroupAccount',
    ContributionInfo: 'ContributionInfo',
    ContributionImage: 'ContributionImage'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserAccountCountOutputType
   */


  export type UserAccountCountOutputType = {
    relationContributionInfo: number
  }

  export type UserAccountCountOutputTypeSelect = {
    relationContributionInfo?: boolean
  }

  export type UserAccountCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserAccountCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserAccountCountOutputType
    : S extends undefined
    ? never
    : S extends UserAccountCountOutputTypeArgs
    ?'include' extends U
    ? UserAccountCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserAccountCountOutputType ?UserAccountCountOutputType [P]
  : 
     never
  } 
    : UserAccountCountOutputType
  : UserAccountCountOutputType




  // Custom InputTypes

  /**
   * UserAccountCountOutputType without action
   */
  export type UserAccountCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserAccountCountOutputType
     * 
    **/
    select?: UserAccountCountOutputTypeSelect | null
  }



  /**
   * Count Type GroupAccountCountOutputType
   */


  export type GroupAccountCountOutputType = {
    relationContributionInfo: number
  }

  export type GroupAccountCountOutputTypeSelect = {
    relationContributionInfo?: boolean
  }

  export type GroupAccountCountOutputTypeGetPayload<
    S extends boolean | null | undefined | GroupAccountCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? GroupAccountCountOutputType
    : S extends undefined
    ? never
    : S extends GroupAccountCountOutputTypeArgs
    ?'include' extends U
    ? GroupAccountCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof GroupAccountCountOutputType ?GroupAccountCountOutputType [P]
  : 
     never
  } 
    : GroupAccountCountOutputType
  : GroupAccountCountOutputType




  // Custom InputTypes

  /**
   * GroupAccountCountOutputType without action
   */
  export type GroupAccountCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GroupAccountCountOutputType
     * 
    **/
    select?: GroupAccountCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model UserAccount
   */


  export type AggregateUserAccount = {
    _count: UserAccountCountAggregateOutputType | null
    _min: UserAccountMinAggregateOutputType | null
    _max: UserAccountMaxAggregateOutputType | null
  }

  export type UserAccountMinAggregateOutputType = {
    userId: string | null
    userName: string | null
    groupId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserAccountMaxAggregateOutputType = {
    userId: string | null
    userName: string | null
    groupId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserAccountCountAggregateOutputType = {
    userId: number
    userName: number
    groupId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAccountMinAggregateInputType = {
    userId?: true
    userName?: true
    groupId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserAccountMaxAggregateInputType = {
    userId?: true
    userName?: true
    groupId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserAccountCountAggregateInputType = {
    userId?: true
    userName?: true
    groupId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAccountAggregateArgs = {
    /**
     * Filter which UserAccount to aggregate.
     * 
    **/
    where?: UserAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAccounts to fetch.
     * 
    **/
    orderBy?: Enumerable<UserAccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAccounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAccounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAccounts
    **/
    _count?: true | UserAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAccountMaxAggregateInputType
  }

  export type GetUserAccountAggregateType<T extends UserAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAccount[P]>
      : GetScalarType<T[P], AggregateUserAccount[P]>
  }




  export type UserAccountGroupByArgs = {
    where?: UserAccountWhereInput
    orderBy?: Enumerable<UserAccountOrderByWithAggregationInput>
    by: Array<UserAccountScalarFieldEnum>
    having?: UserAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAccountCountAggregateInputType | true
    _min?: UserAccountMinAggregateInputType
    _max?: UserAccountMaxAggregateInputType
  }


  export type UserAccountGroupByOutputType = {
    userId: string
    userName: string
    groupId: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserAccountCountAggregateOutputType | null
    _min: UserAccountMinAggregateOutputType | null
    _max: UserAccountMaxAggregateOutputType | null
  }

  type GetUserAccountGroupByPayload<T extends UserAccountGroupByArgs> = Promise<
    Array<
      PickArray<UserAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAccountGroupByOutputType[P]>
            : GetScalarType<T[P], UserAccountGroupByOutputType[P]>
        }
      >
    >


  export type UserAccountSelect = {
    userId?: boolean
    userName?: boolean
    groupId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    relationContributionInfo?: boolean | ContributionInfoFindManyArgs
    _count?: boolean | UserAccountCountOutputTypeArgs
  }

  export type UserAccountInclude = {
    relationContributionInfo?: boolean | ContributionInfoFindManyArgs
    _count?: boolean | UserAccountCountOutputTypeArgs
  }

  export type UserAccountGetPayload<
    S extends boolean | null | undefined | UserAccountArgs,
    U = keyof S
      > = S extends true
        ? UserAccount
    : S extends undefined
    ? never
    : S extends UserAccountArgs | UserAccountFindManyArgs
    ?'include' extends U
    ? UserAccount  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'relationContributionInfo'
        ? Array < ContributionInfoGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? UserAccountCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserAccount ?UserAccount [P]
  : 
          P extends 'relationContributionInfo'
        ? Array < ContributionInfoGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? UserAccountCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : UserAccount
  : UserAccount


  type UserAccountCountArgs = Merge<
    Omit<UserAccountFindManyArgs, 'select' | 'include'> & {
      select?: UserAccountCountAggregateInputType | true
    }
  >

  export interface UserAccountDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserAccount that matches the filter.
     * @param {UserAccountFindUniqueArgs} args - Arguments to find a UserAccount
     * @example
     * // Get one UserAccount
     * const userAccount = await prisma.userAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserAccountFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserAccountFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserAccount'> extends True ? CheckSelect<T, Prisma__UserAccountClient<UserAccount>, Prisma__UserAccountClient<UserAccountGetPayload<T>>> : CheckSelect<T, Prisma__UserAccountClient<UserAccount | null >, Prisma__UserAccountClient<UserAccountGetPayload<T> | null >>

    /**
     * Find the first UserAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAccountFindFirstArgs} args - Arguments to find a UserAccount
     * @example
     * // Get one UserAccount
     * const userAccount = await prisma.userAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserAccountFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserAccountFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserAccount'> extends True ? CheckSelect<T, Prisma__UserAccountClient<UserAccount>, Prisma__UserAccountClient<UserAccountGetPayload<T>>> : CheckSelect<T, Prisma__UserAccountClient<UserAccount | null >, Prisma__UserAccountClient<UserAccountGetPayload<T> | null >>

    /**
     * Find zero or more UserAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAccounts
     * const userAccounts = await prisma.userAccount.findMany()
     * 
     * // Get first 10 UserAccounts
     * const userAccounts = await prisma.userAccount.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userAccountWithUserIdOnly = await prisma.userAccount.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends UserAccountFindManyArgs>(
      args?: SelectSubset<T, UserAccountFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserAccount>>, PrismaPromise<Array<UserAccountGetPayload<T>>>>

    /**
     * Create a UserAccount.
     * @param {UserAccountCreateArgs} args - Arguments to create a UserAccount.
     * @example
     * // Create one UserAccount
     * const UserAccount = await prisma.userAccount.create({
     *   data: {
     *     // ... data to create a UserAccount
     *   }
     * })
     * 
    **/
    create<T extends UserAccountCreateArgs>(
      args: SelectSubset<T, UserAccountCreateArgs>
    ): CheckSelect<T, Prisma__UserAccountClient<UserAccount>, Prisma__UserAccountClient<UserAccountGetPayload<T>>>

    /**
     * Create many UserAccounts.
     *     @param {UserAccountCreateManyArgs} args - Arguments to create many UserAccounts.
     *     @example
     *     // Create many UserAccounts
     *     const userAccount = await prisma.userAccount.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserAccountCreateManyArgs>(
      args?: SelectSubset<T, UserAccountCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserAccount.
     * @param {UserAccountDeleteArgs} args - Arguments to delete one UserAccount.
     * @example
     * // Delete one UserAccount
     * const UserAccount = await prisma.userAccount.delete({
     *   where: {
     *     // ... filter to delete one UserAccount
     *   }
     * })
     * 
    **/
    delete<T extends UserAccountDeleteArgs>(
      args: SelectSubset<T, UserAccountDeleteArgs>
    ): CheckSelect<T, Prisma__UserAccountClient<UserAccount>, Prisma__UserAccountClient<UserAccountGetPayload<T>>>

    /**
     * Update one UserAccount.
     * @param {UserAccountUpdateArgs} args - Arguments to update one UserAccount.
     * @example
     * // Update one UserAccount
     * const userAccount = await prisma.userAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserAccountUpdateArgs>(
      args: SelectSubset<T, UserAccountUpdateArgs>
    ): CheckSelect<T, Prisma__UserAccountClient<UserAccount>, Prisma__UserAccountClient<UserAccountGetPayload<T>>>

    /**
     * Delete zero or more UserAccounts.
     * @param {UserAccountDeleteManyArgs} args - Arguments to filter UserAccounts to delete.
     * @example
     * // Delete a few UserAccounts
     * const { count } = await prisma.userAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserAccountDeleteManyArgs>(
      args?: SelectSubset<T, UserAccountDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAccounts
     * const userAccount = await prisma.userAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserAccountUpdateManyArgs>(
      args: SelectSubset<T, UserAccountUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserAccount.
     * @param {UserAccountUpsertArgs} args - Arguments to update or create a UserAccount.
     * @example
     * // Update or create a UserAccount
     * const userAccount = await prisma.userAccount.upsert({
     *   create: {
     *     // ... data to create a UserAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAccount we want to update
     *   }
     * })
    **/
    upsert<T extends UserAccountUpsertArgs>(
      args: SelectSubset<T, UserAccountUpsertArgs>
    ): CheckSelect<T, Prisma__UserAccountClient<UserAccount>, Prisma__UserAccountClient<UserAccountGetPayload<T>>>

    /**
     * Count the number of UserAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAccountCountArgs} args - Arguments to filter UserAccounts to count.
     * @example
     * // Count the number of UserAccounts
     * const count = await prisma.userAccount.count({
     *   where: {
     *     // ... the filter for the UserAccounts we want to count
     *   }
     * })
    **/
    count<T extends UserAccountCountArgs>(
      args?: Subset<T, UserAccountCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAccountAggregateArgs>(args: Subset<T, UserAccountAggregateArgs>): PrismaPromise<GetUserAccountAggregateType<T>>

    /**
     * Group by UserAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAccountGroupByArgs['orderBy'] }
        : { orderBy?: UserAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAccountGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserAccountClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    relationContributionInfo<T extends ContributionInfoFindManyArgs = {}>(args?: Subset<T, ContributionInfoFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ContributionInfo>>, PrismaPromise<Array<ContributionInfoGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserAccount findUnique
   */
  export type UserAccountFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the UserAccount
     * 
    **/
    select?: UserAccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAccountInclude | null
    /**
     * Throw an Error if a UserAccount can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserAccount to fetch.
     * 
    **/
    where: UserAccountWhereUniqueInput
  }


  /**
   * UserAccount findFirst
   */
  export type UserAccountFindFirstArgs = {
    /**
     * Select specific fields to fetch from the UserAccount
     * 
    **/
    select?: UserAccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAccountInclude | null
    /**
     * Throw an Error if a UserAccount can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserAccount to fetch.
     * 
    **/
    where?: UserAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAccounts to fetch.
     * 
    **/
    orderBy?: Enumerable<UserAccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAccounts.
     * 
    **/
    cursor?: UserAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAccounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAccounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAccounts.
     * 
    **/
    distinct?: Enumerable<UserAccountScalarFieldEnum>
  }


  /**
   * UserAccount findMany
   */
  export type UserAccountFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserAccount
     * 
    **/
    select?: UserAccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAccountInclude | null
    /**
     * Filter, which UserAccounts to fetch.
     * 
    **/
    where?: UserAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAccounts to fetch.
     * 
    **/
    orderBy?: Enumerable<UserAccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAccounts.
     * 
    **/
    cursor?: UserAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAccounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAccounts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserAccountScalarFieldEnum>
  }


  /**
   * UserAccount create
   */
  export type UserAccountCreateArgs = {
    /**
     * Select specific fields to fetch from the UserAccount
     * 
    **/
    select?: UserAccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAccountInclude | null
    /**
     * The data needed to create a UserAccount.
     * 
    **/
    data: XOR<UserAccountCreateInput, UserAccountUncheckedCreateInput>
  }


  /**
   * UserAccount createMany
   */
  export type UserAccountCreateManyArgs = {
    data: Enumerable<UserAccountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserAccount update
   */
  export type UserAccountUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserAccount
     * 
    **/
    select?: UserAccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAccountInclude | null
    /**
     * The data needed to update a UserAccount.
     * 
    **/
    data: XOR<UserAccountUpdateInput, UserAccountUncheckedUpdateInput>
    /**
     * Choose, which UserAccount to update.
     * 
    **/
    where: UserAccountWhereUniqueInput
  }


  /**
   * UserAccount updateMany
   */
  export type UserAccountUpdateManyArgs = {
    data: XOR<UserAccountUpdateManyMutationInput, UserAccountUncheckedUpdateManyInput>
    where?: UserAccountWhereInput
  }


  /**
   * UserAccount upsert
   */
  export type UserAccountUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserAccount
     * 
    **/
    select?: UserAccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAccountInclude | null
    /**
     * The filter to search for the UserAccount to update in case it exists.
     * 
    **/
    where: UserAccountWhereUniqueInput
    /**
     * In case the UserAccount found by the `where` argument doesn't exist, create a new UserAccount with this data.
     * 
    **/
    create: XOR<UserAccountCreateInput, UserAccountUncheckedCreateInput>
    /**
     * In case the UserAccount was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserAccountUpdateInput, UserAccountUncheckedUpdateInput>
  }


  /**
   * UserAccount delete
   */
  export type UserAccountDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserAccount
     * 
    **/
    select?: UserAccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAccountInclude | null
    /**
     * Filter which UserAccount to delete.
     * 
    **/
    where: UserAccountWhereUniqueInput
  }


  /**
   * UserAccount deleteMany
   */
  export type UserAccountDeleteManyArgs = {
    where?: UserAccountWhereInput
  }


  /**
   * UserAccount without action
   */
  export type UserAccountArgs = {
    /**
     * Select specific fields to fetch from the UserAccount
     * 
    **/
    select?: UserAccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAccountInclude | null
  }



  /**
   * Model GroupAccount
   */


  export type AggregateGroupAccount = {
    _count: GroupAccountCountAggregateOutputType | null
    _min: GroupAccountMinAggregateOutputType | null
    _max: GroupAccountMaxAggregateOutputType | null
  }

  export type GroupAccountMinAggregateOutputType = {
    groupId: string | null
    groupPass: string | null
    groupName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupAccountMaxAggregateOutputType = {
    groupId: string | null
    groupPass: string | null
    groupName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupAccountCountAggregateOutputType = {
    groupId: number
    groupPass: number
    groupName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GroupAccountMinAggregateInputType = {
    groupId?: true
    groupPass?: true
    groupName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupAccountMaxAggregateInputType = {
    groupId?: true
    groupPass?: true
    groupName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupAccountCountAggregateInputType = {
    groupId?: true
    groupPass?: true
    groupName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GroupAccountAggregateArgs = {
    /**
     * Filter which GroupAccount to aggregate.
     * 
    **/
    where?: GroupAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupAccounts to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupAccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GroupAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupAccounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupAccounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupAccounts
    **/
    _count?: true | GroupAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupAccountMaxAggregateInputType
  }

  export type GetGroupAccountAggregateType<T extends GroupAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupAccount[P]>
      : GetScalarType<T[P], AggregateGroupAccount[P]>
  }




  export type GroupAccountGroupByArgs = {
    where?: GroupAccountWhereInput
    orderBy?: Enumerable<GroupAccountOrderByWithAggregationInput>
    by: Array<GroupAccountScalarFieldEnum>
    having?: GroupAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupAccountCountAggregateInputType | true
    _min?: GroupAccountMinAggregateInputType
    _max?: GroupAccountMaxAggregateInputType
  }


  export type GroupAccountGroupByOutputType = {
    groupId: string
    groupPass: string
    groupName: string
    createdAt: Date
    updatedAt: Date
    _count: GroupAccountCountAggregateOutputType | null
    _min: GroupAccountMinAggregateOutputType | null
    _max: GroupAccountMaxAggregateOutputType | null
  }

  type GetGroupAccountGroupByPayload<T extends GroupAccountGroupByArgs> = Promise<
    Array<
      PickArray<GroupAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupAccountGroupByOutputType[P]>
            : GetScalarType<T[P], GroupAccountGroupByOutputType[P]>
        }
      >
    >


  export type GroupAccountSelect = {
    groupId?: boolean
    groupPass?: boolean
    groupName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    relationContributionInfo?: boolean | ContributionInfoFindManyArgs
    _count?: boolean | GroupAccountCountOutputTypeArgs
  }

  export type GroupAccountInclude = {
    relationContributionInfo?: boolean | ContributionInfoFindManyArgs
    _count?: boolean | GroupAccountCountOutputTypeArgs
  }

  export type GroupAccountGetPayload<
    S extends boolean | null | undefined | GroupAccountArgs,
    U = keyof S
      > = S extends true
        ? GroupAccount
    : S extends undefined
    ? never
    : S extends GroupAccountArgs | GroupAccountFindManyArgs
    ?'include' extends U
    ? GroupAccount  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'relationContributionInfo'
        ? Array < ContributionInfoGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? GroupAccountCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof GroupAccount ?GroupAccount [P]
  : 
          P extends 'relationContributionInfo'
        ? Array < ContributionInfoGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? GroupAccountCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : GroupAccount
  : GroupAccount


  type GroupAccountCountArgs = Merge<
    Omit<GroupAccountFindManyArgs, 'select' | 'include'> & {
      select?: GroupAccountCountAggregateInputType | true
    }
  >

  export interface GroupAccountDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one GroupAccount that matches the filter.
     * @param {GroupAccountFindUniqueArgs} args - Arguments to find a GroupAccount
     * @example
     * // Get one GroupAccount
     * const groupAccount = await prisma.groupAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupAccountFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GroupAccountFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GroupAccount'> extends True ? CheckSelect<T, Prisma__GroupAccountClient<GroupAccount>, Prisma__GroupAccountClient<GroupAccountGetPayload<T>>> : CheckSelect<T, Prisma__GroupAccountClient<GroupAccount | null >, Prisma__GroupAccountClient<GroupAccountGetPayload<T> | null >>

    /**
     * Find the first GroupAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAccountFindFirstArgs} args - Arguments to find a GroupAccount
     * @example
     * // Get one GroupAccount
     * const groupAccount = await prisma.groupAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupAccountFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GroupAccountFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GroupAccount'> extends True ? CheckSelect<T, Prisma__GroupAccountClient<GroupAccount>, Prisma__GroupAccountClient<GroupAccountGetPayload<T>>> : CheckSelect<T, Prisma__GroupAccountClient<GroupAccount | null >, Prisma__GroupAccountClient<GroupAccountGetPayload<T> | null >>

    /**
     * Find zero or more GroupAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupAccounts
     * const groupAccounts = await prisma.groupAccount.findMany()
     * 
     * // Get first 10 GroupAccounts
     * const groupAccounts = await prisma.groupAccount.findMany({ take: 10 })
     * 
     * // Only select the `groupId`
     * const groupAccountWithGroupIdOnly = await prisma.groupAccount.findMany({ select: { groupId: true } })
     * 
    **/
    findMany<T extends GroupAccountFindManyArgs>(
      args?: SelectSubset<T, GroupAccountFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<GroupAccount>>, PrismaPromise<Array<GroupAccountGetPayload<T>>>>

    /**
     * Create a GroupAccount.
     * @param {GroupAccountCreateArgs} args - Arguments to create a GroupAccount.
     * @example
     * // Create one GroupAccount
     * const GroupAccount = await prisma.groupAccount.create({
     *   data: {
     *     // ... data to create a GroupAccount
     *   }
     * })
     * 
    **/
    create<T extends GroupAccountCreateArgs>(
      args: SelectSubset<T, GroupAccountCreateArgs>
    ): CheckSelect<T, Prisma__GroupAccountClient<GroupAccount>, Prisma__GroupAccountClient<GroupAccountGetPayload<T>>>

    /**
     * Create many GroupAccounts.
     *     @param {GroupAccountCreateManyArgs} args - Arguments to create many GroupAccounts.
     *     @example
     *     // Create many GroupAccounts
     *     const groupAccount = await prisma.groupAccount.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GroupAccountCreateManyArgs>(
      args?: SelectSubset<T, GroupAccountCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a GroupAccount.
     * @param {GroupAccountDeleteArgs} args - Arguments to delete one GroupAccount.
     * @example
     * // Delete one GroupAccount
     * const GroupAccount = await prisma.groupAccount.delete({
     *   where: {
     *     // ... filter to delete one GroupAccount
     *   }
     * })
     * 
    **/
    delete<T extends GroupAccountDeleteArgs>(
      args: SelectSubset<T, GroupAccountDeleteArgs>
    ): CheckSelect<T, Prisma__GroupAccountClient<GroupAccount>, Prisma__GroupAccountClient<GroupAccountGetPayload<T>>>

    /**
     * Update one GroupAccount.
     * @param {GroupAccountUpdateArgs} args - Arguments to update one GroupAccount.
     * @example
     * // Update one GroupAccount
     * const groupAccount = await prisma.groupAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupAccountUpdateArgs>(
      args: SelectSubset<T, GroupAccountUpdateArgs>
    ): CheckSelect<T, Prisma__GroupAccountClient<GroupAccount>, Prisma__GroupAccountClient<GroupAccountGetPayload<T>>>

    /**
     * Delete zero or more GroupAccounts.
     * @param {GroupAccountDeleteManyArgs} args - Arguments to filter GroupAccounts to delete.
     * @example
     * // Delete a few GroupAccounts
     * const { count } = await prisma.groupAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupAccountDeleteManyArgs>(
      args?: SelectSubset<T, GroupAccountDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupAccounts
     * const groupAccount = await prisma.groupAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupAccountUpdateManyArgs>(
      args: SelectSubset<T, GroupAccountUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one GroupAccount.
     * @param {GroupAccountUpsertArgs} args - Arguments to update or create a GroupAccount.
     * @example
     * // Update or create a GroupAccount
     * const groupAccount = await prisma.groupAccount.upsert({
     *   create: {
     *     // ... data to create a GroupAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupAccount we want to update
     *   }
     * })
    **/
    upsert<T extends GroupAccountUpsertArgs>(
      args: SelectSubset<T, GroupAccountUpsertArgs>
    ): CheckSelect<T, Prisma__GroupAccountClient<GroupAccount>, Prisma__GroupAccountClient<GroupAccountGetPayload<T>>>

    /**
     * Count the number of GroupAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAccountCountArgs} args - Arguments to filter GroupAccounts to count.
     * @example
     * // Count the number of GroupAccounts
     * const count = await prisma.groupAccount.count({
     *   where: {
     *     // ... the filter for the GroupAccounts we want to count
     *   }
     * })
    **/
    count<T extends GroupAccountCountArgs>(
      args?: Subset<T, GroupAccountCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupAccountAggregateArgs>(args: Subset<T, GroupAccountAggregateArgs>): PrismaPromise<GetGroupAccountAggregateType<T>>

    /**
     * Group by GroupAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupAccountGroupByArgs['orderBy'] }
        : { orderBy?: GroupAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupAccountGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GroupAccountClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    relationContributionInfo<T extends ContributionInfoFindManyArgs = {}>(args?: Subset<T, ContributionInfoFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ContributionInfo>>, PrismaPromise<Array<ContributionInfoGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * GroupAccount findUnique
   */
  export type GroupAccountFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the GroupAccount
     * 
    **/
    select?: GroupAccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupAccountInclude | null
    /**
     * Throw an Error if a GroupAccount can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which GroupAccount to fetch.
     * 
    **/
    where: GroupAccountWhereUniqueInput
  }


  /**
   * GroupAccount findFirst
   */
  export type GroupAccountFindFirstArgs = {
    /**
     * Select specific fields to fetch from the GroupAccount
     * 
    **/
    select?: GroupAccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupAccountInclude | null
    /**
     * Throw an Error if a GroupAccount can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which GroupAccount to fetch.
     * 
    **/
    where?: GroupAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupAccounts to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupAccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupAccounts.
     * 
    **/
    cursor?: GroupAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupAccounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupAccounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupAccounts.
     * 
    **/
    distinct?: Enumerable<GroupAccountScalarFieldEnum>
  }


  /**
   * GroupAccount findMany
   */
  export type GroupAccountFindManyArgs = {
    /**
     * Select specific fields to fetch from the GroupAccount
     * 
    **/
    select?: GroupAccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupAccountInclude | null
    /**
     * Filter, which GroupAccounts to fetch.
     * 
    **/
    where?: GroupAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupAccounts to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupAccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupAccounts.
     * 
    **/
    cursor?: GroupAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupAccounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupAccounts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GroupAccountScalarFieldEnum>
  }


  /**
   * GroupAccount create
   */
  export type GroupAccountCreateArgs = {
    /**
     * Select specific fields to fetch from the GroupAccount
     * 
    **/
    select?: GroupAccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupAccountInclude | null
    /**
     * The data needed to create a GroupAccount.
     * 
    **/
    data: XOR<GroupAccountCreateInput, GroupAccountUncheckedCreateInput>
  }


  /**
   * GroupAccount createMany
   */
  export type GroupAccountCreateManyArgs = {
    data: Enumerable<GroupAccountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GroupAccount update
   */
  export type GroupAccountUpdateArgs = {
    /**
     * Select specific fields to fetch from the GroupAccount
     * 
    **/
    select?: GroupAccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupAccountInclude | null
    /**
     * The data needed to update a GroupAccount.
     * 
    **/
    data: XOR<GroupAccountUpdateInput, GroupAccountUncheckedUpdateInput>
    /**
     * Choose, which GroupAccount to update.
     * 
    **/
    where: GroupAccountWhereUniqueInput
  }


  /**
   * GroupAccount updateMany
   */
  export type GroupAccountUpdateManyArgs = {
    data: XOR<GroupAccountUpdateManyMutationInput, GroupAccountUncheckedUpdateManyInput>
    where?: GroupAccountWhereInput
  }


  /**
   * GroupAccount upsert
   */
  export type GroupAccountUpsertArgs = {
    /**
     * Select specific fields to fetch from the GroupAccount
     * 
    **/
    select?: GroupAccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupAccountInclude | null
    /**
     * The filter to search for the GroupAccount to update in case it exists.
     * 
    **/
    where: GroupAccountWhereUniqueInput
    /**
     * In case the GroupAccount found by the `where` argument doesn't exist, create a new GroupAccount with this data.
     * 
    **/
    create: XOR<GroupAccountCreateInput, GroupAccountUncheckedCreateInput>
    /**
     * In case the GroupAccount was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GroupAccountUpdateInput, GroupAccountUncheckedUpdateInput>
  }


  /**
   * GroupAccount delete
   */
  export type GroupAccountDeleteArgs = {
    /**
     * Select specific fields to fetch from the GroupAccount
     * 
    **/
    select?: GroupAccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupAccountInclude | null
    /**
     * Filter which GroupAccount to delete.
     * 
    **/
    where: GroupAccountWhereUniqueInput
  }


  /**
   * GroupAccount deleteMany
   */
  export type GroupAccountDeleteManyArgs = {
    where?: GroupAccountWhereInput
  }


  /**
   * GroupAccount without action
   */
  export type GroupAccountArgs = {
    /**
     * Select specific fields to fetch from the GroupAccount
     * 
    **/
    select?: GroupAccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupAccountInclude | null
  }



  /**
   * Model ContributionInfo
   */


  export type AggregateContributionInfo = {
    _count: ContributionInfoCountAggregateOutputType | null
    _avg: ContributionInfoAvgAggregateOutputType | null
    _sum: ContributionInfoSumAggregateOutputType | null
    _min: ContributionInfoMinAggregateOutputType | null
    _max: ContributionInfoMaxAggregateOutputType | null
  }

  export type ContributionInfoAvgAggregateOutputType = {
    contributionId: number | null
    compositionRatio1: number | null
    compositionRatio2: number | null
    compositionRatio3: number | null
    unitPrice: number | null
  }

  export type ContributionInfoSumAggregateOutputType = {
    contributionId: number | null
    compositionRatio1: number | null
    compositionRatio2: number | null
    compositionRatio3: number | null
    unitPrice: number | null
  }

  export type ContributionInfoMinAggregateOutputType = {
    contributionId: number | null
    groupId: string | null
    userId: string | null
    materialName: string | null
    category: string | null
    composition1: string | null
    compositionRatio1: number | null
    composition2: string | null
    compositionRatio2: number | null
    composition3: string | null
    compositionRatio3: number | null
    fabricStructure: string | null
    color: string | null
    pattern: string | null
    processing: string | null
    unitPrice: number | null
    supplier: string | null
    comment: string | null
    isDeleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContributionInfoMaxAggregateOutputType = {
    contributionId: number | null
    groupId: string | null
    userId: string | null
    materialName: string | null
    category: string | null
    composition1: string | null
    compositionRatio1: number | null
    composition2: string | null
    compositionRatio2: number | null
    composition3: string | null
    compositionRatio3: number | null
    fabricStructure: string | null
    color: string | null
    pattern: string | null
    processing: string | null
    unitPrice: number | null
    supplier: string | null
    comment: string | null
    isDeleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContributionInfoCountAggregateOutputType = {
    contributionId: number
    groupId: number
    userId: number
    materialName: number
    category: number
    composition1: number
    compositionRatio1: number
    composition2: number
    compositionRatio2: number
    composition3: number
    compositionRatio3: number
    fabricStructure: number
    color: number
    pattern: number
    processing: number
    unitPrice: number
    supplier: number
    comment: number
    isDeleted: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContributionInfoAvgAggregateInputType = {
    contributionId?: true
    compositionRatio1?: true
    compositionRatio2?: true
    compositionRatio3?: true
    unitPrice?: true
  }

  export type ContributionInfoSumAggregateInputType = {
    contributionId?: true
    compositionRatio1?: true
    compositionRatio2?: true
    compositionRatio3?: true
    unitPrice?: true
  }

  export type ContributionInfoMinAggregateInputType = {
    contributionId?: true
    groupId?: true
    userId?: true
    materialName?: true
    category?: true
    composition1?: true
    compositionRatio1?: true
    composition2?: true
    compositionRatio2?: true
    composition3?: true
    compositionRatio3?: true
    fabricStructure?: true
    color?: true
    pattern?: true
    processing?: true
    unitPrice?: true
    supplier?: true
    comment?: true
    isDeleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContributionInfoMaxAggregateInputType = {
    contributionId?: true
    groupId?: true
    userId?: true
    materialName?: true
    category?: true
    composition1?: true
    compositionRatio1?: true
    composition2?: true
    compositionRatio2?: true
    composition3?: true
    compositionRatio3?: true
    fabricStructure?: true
    color?: true
    pattern?: true
    processing?: true
    unitPrice?: true
    supplier?: true
    comment?: true
    isDeleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContributionInfoCountAggregateInputType = {
    contributionId?: true
    groupId?: true
    userId?: true
    materialName?: true
    category?: true
    composition1?: true
    compositionRatio1?: true
    composition2?: true
    compositionRatio2?: true
    composition3?: true
    compositionRatio3?: true
    fabricStructure?: true
    color?: true
    pattern?: true
    processing?: true
    unitPrice?: true
    supplier?: true
    comment?: true
    isDeleted?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContributionInfoAggregateArgs = {
    /**
     * Filter which ContributionInfo to aggregate.
     * 
    **/
    where?: ContributionInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContributionInfos to fetch.
     * 
    **/
    orderBy?: Enumerable<ContributionInfoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ContributionInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContributionInfos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContributionInfos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContributionInfos
    **/
    _count?: true | ContributionInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContributionInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContributionInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContributionInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContributionInfoMaxAggregateInputType
  }

  export type GetContributionInfoAggregateType<T extends ContributionInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateContributionInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContributionInfo[P]>
      : GetScalarType<T[P], AggregateContributionInfo[P]>
  }




  export type ContributionInfoGroupByArgs = {
    where?: ContributionInfoWhereInput
    orderBy?: Enumerable<ContributionInfoOrderByWithAggregationInput>
    by: Array<ContributionInfoScalarFieldEnum>
    having?: ContributionInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContributionInfoCountAggregateInputType | true
    _avg?: ContributionInfoAvgAggregateInputType
    _sum?: ContributionInfoSumAggregateInputType
    _min?: ContributionInfoMinAggregateInputType
    _max?: ContributionInfoMaxAggregateInputType
  }


  export type ContributionInfoGroupByOutputType = {
    contributionId: number
    groupId: string
    userId: string
    materialName: string
    category: string
    composition1: string | null
    compositionRatio1: number | null
    composition2: string | null
    compositionRatio2: number | null
    composition3: string | null
    compositionRatio3: number | null
    fabricStructure: string | null
    color: string | null
    pattern: string | null
    processing: string | null
    unitPrice: number | null
    supplier: string | null
    comment: string | null
    isDeleted: boolean
    createdAt: Date
    updatedAt: Date
    _count: ContributionInfoCountAggregateOutputType | null
    _avg: ContributionInfoAvgAggregateOutputType | null
    _sum: ContributionInfoSumAggregateOutputType | null
    _min: ContributionInfoMinAggregateOutputType | null
    _max: ContributionInfoMaxAggregateOutputType | null
  }

  type GetContributionInfoGroupByPayload<T extends ContributionInfoGroupByArgs> = Promise<
    Array<
      PickArray<ContributionInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContributionInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContributionInfoGroupByOutputType[P]>
            : GetScalarType<T[P], ContributionInfoGroupByOutputType[P]>
        }
      >
    >


  export type ContributionInfoSelect = {
    contributionId?: boolean
    relationGroupId?: boolean | GroupAccountArgs
    groupId?: boolean
    relationUserId?: boolean | UserAccountArgs
    userId?: boolean
    materialName?: boolean
    category?: boolean
    composition1?: boolean
    compositionRatio1?: boolean
    composition2?: boolean
    compositionRatio2?: boolean
    composition3?: boolean
    compositionRatio3?: boolean
    fabricStructure?: boolean
    color?: boolean
    pattern?: boolean
    processing?: boolean
    unitPrice?: boolean
    supplier?: boolean
    comment?: boolean
    isDeleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    relationContributionImage?: boolean | ContributionImageArgs
  }

  export type ContributionInfoInclude = {
    relationGroupId?: boolean | GroupAccountArgs
    relationUserId?: boolean | UserAccountArgs
    relationContributionImage?: boolean | ContributionImageArgs
  }

  export type ContributionInfoGetPayload<
    S extends boolean | null | undefined | ContributionInfoArgs,
    U = keyof S
      > = S extends true
        ? ContributionInfo
    : S extends undefined
    ? never
    : S extends ContributionInfoArgs | ContributionInfoFindManyArgs
    ?'include' extends U
    ? ContributionInfo  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'relationGroupId'
        ? GroupAccountGetPayload<S['include'][P]> :
        P extends 'relationUserId'
        ? UserAccountGetPayload<S['include'][P]> :
        P extends 'relationContributionImage'
        ? ContributionImageGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ContributionInfo ?ContributionInfo [P]
  : 
          P extends 'relationGroupId'
        ? GroupAccountGetPayload<S['select'][P]> :
        P extends 'relationUserId'
        ? UserAccountGetPayload<S['select'][P]> :
        P extends 'relationContributionImage'
        ? ContributionImageGetPayload<S['select'][P]> | null : never
  } 
    : ContributionInfo
  : ContributionInfo


  type ContributionInfoCountArgs = Merge<
    Omit<ContributionInfoFindManyArgs, 'select' | 'include'> & {
      select?: ContributionInfoCountAggregateInputType | true
    }
  >

  export interface ContributionInfoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ContributionInfo that matches the filter.
     * @param {ContributionInfoFindUniqueArgs} args - Arguments to find a ContributionInfo
     * @example
     * // Get one ContributionInfo
     * const contributionInfo = await prisma.contributionInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContributionInfoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ContributionInfoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ContributionInfo'> extends True ? CheckSelect<T, Prisma__ContributionInfoClient<ContributionInfo>, Prisma__ContributionInfoClient<ContributionInfoGetPayload<T>>> : CheckSelect<T, Prisma__ContributionInfoClient<ContributionInfo | null >, Prisma__ContributionInfoClient<ContributionInfoGetPayload<T> | null >>

    /**
     * Find the first ContributionInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionInfoFindFirstArgs} args - Arguments to find a ContributionInfo
     * @example
     * // Get one ContributionInfo
     * const contributionInfo = await prisma.contributionInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContributionInfoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ContributionInfoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ContributionInfo'> extends True ? CheckSelect<T, Prisma__ContributionInfoClient<ContributionInfo>, Prisma__ContributionInfoClient<ContributionInfoGetPayload<T>>> : CheckSelect<T, Prisma__ContributionInfoClient<ContributionInfo | null >, Prisma__ContributionInfoClient<ContributionInfoGetPayload<T> | null >>

    /**
     * Find zero or more ContributionInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionInfoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContributionInfos
     * const contributionInfos = await prisma.contributionInfo.findMany()
     * 
     * // Get first 10 ContributionInfos
     * const contributionInfos = await prisma.contributionInfo.findMany({ take: 10 })
     * 
     * // Only select the `contributionId`
     * const contributionInfoWithContributionIdOnly = await prisma.contributionInfo.findMany({ select: { contributionId: true } })
     * 
    **/
    findMany<T extends ContributionInfoFindManyArgs>(
      args?: SelectSubset<T, ContributionInfoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ContributionInfo>>, PrismaPromise<Array<ContributionInfoGetPayload<T>>>>

    /**
     * Create a ContributionInfo.
     * @param {ContributionInfoCreateArgs} args - Arguments to create a ContributionInfo.
     * @example
     * // Create one ContributionInfo
     * const ContributionInfo = await prisma.contributionInfo.create({
     *   data: {
     *     // ... data to create a ContributionInfo
     *   }
     * })
     * 
    **/
    create<T extends ContributionInfoCreateArgs>(
      args: SelectSubset<T, ContributionInfoCreateArgs>
    ): CheckSelect<T, Prisma__ContributionInfoClient<ContributionInfo>, Prisma__ContributionInfoClient<ContributionInfoGetPayload<T>>>

    /**
     * Create many ContributionInfos.
     *     @param {ContributionInfoCreateManyArgs} args - Arguments to create many ContributionInfos.
     *     @example
     *     // Create many ContributionInfos
     *     const contributionInfo = await prisma.contributionInfo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ContributionInfoCreateManyArgs>(
      args?: SelectSubset<T, ContributionInfoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ContributionInfo.
     * @param {ContributionInfoDeleteArgs} args - Arguments to delete one ContributionInfo.
     * @example
     * // Delete one ContributionInfo
     * const ContributionInfo = await prisma.contributionInfo.delete({
     *   where: {
     *     // ... filter to delete one ContributionInfo
     *   }
     * })
     * 
    **/
    delete<T extends ContributionInfoDeleteArgs>(
      args: SelectSubset<T, ContributionInfoDeleteArgs>
    ): CheckSelect<T, Prisma__ContributionInfoClient<ContributionInfo>, Prisma__ContributionInfoClient<ContributionInfoGetPayload<T>>>

    /**
     * Update one ContributionInfo.
     * @param {ContributionInfoUpdateArgs} args - Arguments to update one ContributionInfo.
     * @example
     * // Update one ContributionInfo
     * const contributionInfo = await prisma.contributionInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContributionInfoUpdateArgs>(
      args: SelectSubset<T, ContributionInfoUpdateArgs>
    ): CheckSelect<T, Prisma__ContributionInfoClient<ContributionInfo>, Prisma__ContributionInfoClient<ContributionInfoGetPayload<T>>>

    /**
     * Delete zero or more ContributionInfos.
     * @param {ContributionInfoDeleteManyArgs} args - Arguments to filter ContributionInfos to delete.
     * @example
     * // Delete a few ContributionInfos
     * const { count } = await prisma.contributionInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContributionInfoDeleteManyArgs>(
      args?: SelectSubset<T, ContributionInfoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContributionInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContributionInfos
     * const contributionInfo = await prisma.contributionInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContributionInfoUpdateManyArgs>(
      args: SelectSubset<T, ContributionInfoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ContributionInfo.
     * @param {ContributionInfoUpsertArgs} args - Arguments to update or create a ContributionInfo.
     * @example
     * // Update or create a ContributionInfo
     * const contributionInfo = await prisma.contributionInfo.upsert({
     *   create: {
     *     // ... data to create a ContributionInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContributionInfo we want to update
     *   }
     * })
    **/
    upsert<T extends ContributionInfoUpsertArgs>(
      args: SelectSubset<T, ContributionInfoUpsertArgs>
    ): CheckSelect<T, Prisma__ContributionInfoClient<ContributionInfo>, Prisma__ContributionInfoClient<ContributionInfoGetPayload<T>>>

    /**
     * Count the number of ContributionInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionInfoCountArgs} args - Arguments to filter ContributionInfos to count.
     * @example
     * // Count the number of ContributionInfos
     * const count = await prisma.contributionInfo.count({
     *   where: {
     *     // ... the filter for the ContributionInfos we want to count
     *   }
     * })
    **/
    count<T extends ContributionInfoCountArgs>(
      args?: Subset<T, ContributionInfoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContributionInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContributionInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContributionInfoAggregateArgs>(args: Subset<T, ContributionInfoAggregateArgs>): PrismaPromise<GetContributionInfoAggregateType<T>>

    /**
     * Group by ContributionInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContributionInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContributionInfoGroupByArgs['orderBy'] }
        : { orderBy?: ContributionInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContributionInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContributionInfoGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContributionInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContributionInfoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    relationGroupId<T extends GroupAccountArgs = {}>(args?: Subset<T, GroupAccountArgs>): CheckSelect<T, Prisma__GroupAccountClient<GroupAccount | null >, Prisma__GroupAccountClient<GroupAccountGetPayload<T> | null >>;

    relationUserId<T extends UserAccountArgs = {}>(args?: Subset<T, UserAccountArgs>): CheckSelect<T, Prisma__UserAccountClient<UserAccount | null >, Prisma__UserAccountClient<UserAccountGetPayload<T> | null >>;

    relationContributionImage<T extends ContributionImageArgs = {}>(args?: Subset<T, ContributionImageArgs>): CheckSelect<T, Prisma__ContributionImageClient<ContributionImage | null >, Prisma__ContributionImageClient<ContributionImageGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ContributionInfo findUnique
   */
  export type ContributionInfoFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ContributionInfo
     * 
    **/
    select?: ContributionInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContributionInfoInclude | null
    /**
     * Throw an Error if a ContributionInfo can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ContributionInfo to fetch.
     * 
    **/
    where: ContributionInfoWhereUniqueInput
  }


  /**
   * ContributionInfo findFirst
   */
  export type ContributionInfoFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ContributionInfo
     * 
    **/
    select?: ContributionInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContributionInfoInclude | null
    /**
     * Throw an Error if a ContributionInfo can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ContributionInfo to fetch.
     * 
    **/
    where?: ContributionInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContributionInfos to fetch.
     * 
    **/
    orderBy?: Enumerable<ContributionInfoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContributionInfos.
     * 
    **/
    cursor?: ContributionInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContributionInfos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContributionInfos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContributionInfos.
     * 
    **/
    distinct?: Enumerable<ContributionInfoScalarFieldEnum>
  }


  /**
   * ContributionInfo findMany
   */
  export type ContributionInfoFindManyArgs = {
    /**
     * Select specific fields to fetch from the ContributionInfo
     * 
    **/
    select?: ContributionInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContributionInfoInclude | null
    /**
     * Filter, which ContributionInfos to fetch.
     * 
    **/
    where?: ContributionInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContributionInfos to fetch.
     * 
    **/
    orderBy?: Enumerable<ContributionInfoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContributionInfos.
     * 
    **/
    cursor?: ContributionInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContributionInfos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContributionInfos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ContributionInfoScalarFieldEnum>
  }


  /**
   * ContributionInfo create
   */
  export type ContributionInfoCreateArgs = {
    /**
     * Select specific fields to fetch from the ContributionInfo
     * 
    **/
    select?: ContributionInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContributionInfoInclude | null
    /**
     * The data needed to create a ContributionInfo.
     * 
    **/
    data: XOR<ContributionInfoCreateInput, ContributionInfoUncheckedCreateInput>
  }


  /**
   * ContributionInfo createMany
   */
  export type ContributionInfoCreateManyArgs = {
    data: Enumerable<ContributionInfoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ContributionInfo update
   */
  export type ContributionInfoUpdateArgs = {
    /**
     * Select specific fields to fetch from the ContributionInfo
     * 
    **/
    select?: ContributionInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContributionInfoInclude | null
    /**
     * The data needed to update a ContributionInfo.
     * 
    **/
    data: XOR<ContributionInfoUpdateInput, ContributionInfoUncheckedUpdateInput>
    /**
     * Choose, which ContributionInfo to update.
     * 
    **/
    where: ContributionInfoWhereUniqueInput
  }


  /**
   * ContributionInfo updateMany
   */
  export type ContributionInfoUpdateManyArgs = {
    data: XOR<ContributionInfoUpdateManyMutationInput, ContributionInfoUncheckedUpdateManyInput>
    where?: ContributionInfoWhereInput
  }


  /**
   * ContributionInfo upsert
   */
  export type ContributionInfoUpsertArgs = {
    /**
     * Select specific fields to fetch from the ContributionInfo
     * 
    **/
    select?: ContributionInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContributionInfoInclude | null
    /**
     * The filter to search for the ContributionInfo to update in case it exists.
     * 
    **/
    where: ContributionInfoWhereUniqueInput
    /**
     * In case the ContributionInfo found by the `where` argument doesn't exist, create a new ContributionInfo with this data.
     * 
    **/
    create: XOR<ContributionInfoCreateInput, ContributionInfoUncheckedCreateInput>
    /**
     * In case the ContributionInfo was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ContributionInfoUpdateInput, ContributionInfoUncheckedUpdateInput>
  }


  /**
   * ContributionInfo delete
   */
  export type ContributionInfoDeleteArgs = {
    /**
     * Select specific fields to fetch from the ContributionInfo
     * 
    **/
    select?: ContributionInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContributionInfoInclude | null
    /**
     * Filter which ContributionInfo to delete.
     * 
    **/
    where: ContributionInfoWhereUniqueInput
  }


  /**
   * ContributionInfo deleteMany
   */
  export type ContributionInfoDeleteManyArgs = {
    where?: ContributionInfoWhereInput
  }


  /**
   * ContributionInfo without action
   */
  export type ContributionInfoArgs = {
    /**
     * Select specific fields to fetch from the ContributionInfo
     * 
    **/
    select?: ContributionInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContributionInfoInclude | null
  }



  /**
   * Model ContributionImage
   */


  export type AggregateContributionImage = {
    _count: ContributionImageCountAggregateOutputType | null
    _avg: ContributionImageAvgAggregateOutputType | null
    _sum: ContributionImageSumAggregateOutputType | null
    _min: ContributionImageMinAggregateOutputType | null
    _max: ContributionImageMaxAggregateOutputType | null
  }

  export type ContributionImageAvgAggregateOutputType = {
    contributionId: number | null
  }

  export type ContributionImageSumAggregateOutputType = {
    contributionId: number | null
  }

  export type ContributionImageMinAggregateOutputType = {
    contributionId: number | null
    imageName1: string | null
    imageName2: string | null
    imageName3: string | null
    imageName4: string | null
    imageName5: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContributionImageMaxAggregateOutputType = {
    contributionId: number | null
    imageName1: string | null
    imageName2: string | null
    imageName3: string | null
    imageName4: string | null
    imageName5: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContributionImageCountAggregateOutputType = {
    contributionId: number
    imageName1: number
    imageName2: number
    imageName3: number
    imageName4: number
    imageName5: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContributionImageAvgAggregateInputType = {
    contributionId?: true
  }

  export type ContributionImageSumAggregateInputType = {
    contributionId?: true
  }

  export type ContributionImageMinAggregateInputType = {
    contributionId?: true
    imageName1?: true
    imageName2?: true
    imageName3?: true
    imageName4?: true
    imageName5?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContributionImageMaxAggregateInputType = {
    contributionId?: true
    imageName1?: true
    imageName2?: true
    imageName3?: true
    imageName4?: true
    imageName5?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContributionImageCountAggregateInputType = {
    contributionId?: true
    imageName1?: true
    imageName2?: true
    imageName3?: true
    imageName4?: true
    imageName5?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContributionImageAggregateArgs = {
    /**
     * Filter which ContributionImage to aggregate.
     * 
    **/
    where?: ContributionImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContributionImages to fetch.
     * 
    **/
    orderBy?: Enumerable<ContributionImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ContributionImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContributionImages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContributionImages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContributionImages
    **/
    _count?: true | ContributionImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContributionImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContributionImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContributionImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContributionImageMaxAggregateInputType
  }

  export type GetContributionImageAggregateType<T extends ContributionImageAggregateArgs> = {
        [P in keyof T & keyof AggregateContributionImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContributionImage[P]>
      : GetScalarType<T[P], AggregateContributionImage[P]>
  }




  export type ContributionImageGroupByArgs = {
    where?: ContributionImageWhereInput
    orderBy?: Enumerable<ContributionImageOrderByWithAggregationInput>
    by: Array<ContributionImageScalarFieldEnum>
    having?: ContributionImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContributionImageCountAggregateInputType | true
    _avg?: ContributionImageAvgAggregateInputType
    _sum?: ContributionImageSumAggregateInputType
    _min?: ContributionImageMinAggregateInputType
    _max?: ContributionImageMaxAggregateInputType
  }


  export type ContributionImageGroupByOutputType = {
    contributionId: number
    imageName1: string
    imageName2: string | null
    imageName3: string | null
    imageName4: string | null
    imageName5: string | null
    createdAt: Date
    updatedAt: Date
    _count: ContributionImageCountAggregateOutputType | null
    _avg: ContributionImageAvgAggregateOutputType | null
    _sum: ContributionImageSumAggregateOutputType | null
    _min: ContributionImageMinAggregateOutputType | null
    _max: ContributionImageMaxAggregateOutputType | null
  }

  type GetContributionImageGroupByPayload<T extends ContributionImageGroupByArgs> = Promise<
    Array<
      PickArray<ContributionImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContributionImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContributionImageGroupByOutputType[P]>
            : GetScalarType<T[P], ContributionImageGroupByOutputType[P]>
        }
      >
    >


  export type ContributionImageSelect = {
    relationContributionId?: boolean | ContributionInfoArgs
    contributionId?: boolean
    imageName1?: boolean
    imageName2?: boolean
    imageName3?: boolean
    imageName4?: boolean
    imageName5?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ContributionImageInclude = {
    relationContributionId?: boolean | ContributionInfoArgs
  }

  export type ContributionImageGetPayload<
    S extends boolean | null | undefined | ContributionImageArgs,
    U = keyof S
      > = S extends true
        ? ContributionImage
    : S extends undefined
    ? never
    : S extends ContributionImageArgs | ContributionImageFindManyArgs
    ?'include' extends U
    ? ContributionImage  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'relationContributionId'
        ? ContributionInfoGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ContributionImage ?ContributionImage [P]
  : 
          P extends 'relationContributionId'
        ? ContributionInfoGetPayload<S['select'][P]> : never
  } 
    : ContributionImage
  : ContributionImage


  type ContributionImageCountArgs = Merge<
    Omit<ContributionImageFindManyArgs, 'select' | 'include'> & {
      select?: ContributionImageCountAggregateInputType | true
    }
  >

  export interface ContributionImageDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ContributionImage that matches the filter.
     * @param {ContributionImageFindUniqueArgs} args - Arguments to find a ContributionImage
     * @example
     * // Get one ContributionImage
     * const contributionImage = await prisma.contributionImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContributionImageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ContributionImageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ContributionImage'> extends True ? CheckSelect<T, Prisma__ContributionImageClient<ContributionImage>, Prisma__ContributionImageClient<ContributionImageGetPayload<T>>> : CheckSelect<T, Prisma__ContributionImageClient<ContributionImage | null >, Prisma__ContributionImageClient<ContributionImageGetPayload<T> | null >>

    /**
     * Find the first ContributionImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionImageFindFirstArgs} args - Arguments to find a ContributionImage
     * @example
     * // Get one ContributionImage
     * const contributionImage = await prisma.contributionImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContributionImageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ContributionImageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ContributionImage'> extends True ? CheckSelect<T, Prisma__ContributionImageClient<ContributionImage>, Prisma__ContributionImageClient<ContributionImageGetPayload<T>>> : CheckSelect<T, Prisma__ContributionImageClient<ContributionImage | null >, Prisma__ContributionImageClient<ContributionImageGetPayload<T> | null >>

    /**
     * Find zero or more ContributionImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionImageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContributionImages
     * const contributionImages = await prisma.contributionImage.findMany()
     * 
     * // Get first 10 ContributionImages
     * const contributionImages = await prisma.contributionImage.findMany({ take: 10 })
     * 
     * // Only select the `contributionId`
     * const contributionImageWithContributionIdOnly = await prisma.contributionImage.findMany({ select: { contributionId: true } })
     * 
    **/
    findMany<T extends ContributionImageFindManyArgs>(
      args?: SelectSubset<T, ContributionImageFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ContributionImage>>, PrismaPromise<Array<ContributionImageGetPayload<T>>>>

    /**
     * Create a ContributionImage.
     * @param {ContributionImageCreateArgs} args - Arguments to create a ContributionImage.
     * @example
     * // Create one ContributionImage
     * const ContributionImage = await prisma.contributionImage.create({
     *   data: {
     *     // ... data to create a ContributionImage
     *   }
     * })
     * 
    **/
    create<T extends ContributionImageCreateArgs>(
      args: SelectSubset<T, ContributionImageCreateArgs>
    ): CheckSelect<T, Prisma__ContributionImageClient<ContributionImage>, Prisma__ContributionImageClient<ContributionImageGetPayload<T>>>

    /**
     * Create many ContributionImages.
     *     @param {ContributionImageCreateManyArgs} args - Arguments to create many ContributionImages.
     *     @example
     *     // Create many ContributionImages
     *     const contributionImage = await prisma.contributionImage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ContributionImageCreateManyArgs>(
      args?: SelectSubset<T, ContributionImageCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ContributionImage.
     * @param {ContributionImageDeleteArgs} args - Arguments to delete one ContributionImage.
     * @example
     * // Delete one ContributionImage
     * const ContributionImage = await prisma.contributionImage.delete({
     *   where: {
     *     // ... filter to delete one ContributionImage
     *   }
     * })
     * 
    **/
    delete<T extends ContributionImageDeleteArgs>(
      args: SelectSubset<T, ContributionImageDeleteArgs>
    ): CheckSelect<T, Prisma__ContributionImageClient<ContributionImage>, Prisma__ContributionImageClient<ContributionImageGetPayload<T>>>

    /**
     * Update one ContributionImage.
     * @param {ContributionImageUpdateArgs} args - Arguments to update one ContributionImage.
     * @example
     * // Update one ContributionImage
     * const contributionImage = await prisma.contributionImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContributionImageUpdateArgs>(
      args: SelectSubset<T, ContributionImageUpdateArgs>
    ): CheckSelect<T, Prisma__ContributionImageClient<ContributionImage>, Prisma__ContributionImageClient<ContributionImageGetPayload<T>>>

    /**
     * Delete zero or more ContributionImages.
     * @param {ContributionImageDeleteManyArgs} args - Arguments to filter ContributionImages to delete.
     * @example
     * // Delete a few ContributionImages
     * const { count } = await prisma.contributionImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContributionImageDeleteManyArgs>(
      args?: SelectSubset<T, ContributionImageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContributionImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContributionImages
     * const contributionImage = await prisma.contributionImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContributionImageUpdateManyArgs>(
      args: SelectSubset<T, ContributionImageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ContributionImage.
     * @param {ContributionImageUpsertArgs} args - Arguments to update or create a ContributionImage.
     * @example
     * // Update or create a ContributionImage
     * const contributionImage = await prisma.contributionImage.upsert({
     *   create: {
     *     // ... data to create a ContributionImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContributionImage we want to update
     *   }
     * })
    **/
    upsert<T extends ContributionImageUpsertArgs>(
      args: SelectSubset<T, ContributionImageUpsertArgs>
    ): CheckSelect<T, Prisma__ContributionImageClient<ContributionImage>, Prisma__ContributionImageClient<ContributionImageGetPayload<T>>>

    /**
     * Count the number of ContributionImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionImageCountArgs} args - Arguments to filter ContributionImages to count.
     * @example
     * // Count the number of ContributionImages
     * const count = await prisma.contributionImage.count({
     *   where: {
     *     // ... the filter for the ContributionImages we want to count
     *   }
     * })
    **/
    count<T extends ContributionImageCountArgs>(
      args?: Subset<T, ContributionImageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContributionImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContributionImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContributionImageAggregateArgs>(args: Subset<T, ContributionImageAggregateArgs>): PrismaPromise<GetContributionImageAggregateType<T>>

    /**
     * Group by ContributionImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContributionImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContributionImageGroupByArgs['orderBy'] }
        : { orderBy?: ContributionImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContributionImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContributionImageGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContributionImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContributionImageClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    relationContributionId<T extends ContributionInfoArgs = {}>(args?: Subset<T, ContributionInfoArgs>): CheckSelect<T, Prisma__ContributionInfoClient<ContributionInfo | null >, Prisma__ContributionInfoClient<ContributionInfoGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ContributionImage findUnique
   */
  export type ContributionImageFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ContributionImage
     * 
    **/
    select?: ContributionImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContributionImageInclude | null
    /**
     * Throw an Error if a ContributionImage can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ContributionImage to fetch.
     * 
    **/
    where: ContributionImageWhereUniqueInput
  }


  /**
   * ContributionImage findFirst
   */
  export type ContributionImageFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ContributionImage
     * 
    **/
    select?: ContributionImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContributionImageInclude | null
    /**
     * Throw an Error if a ContributionImage can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ContributionImage to fetch.
     * 
    **/
    where?: ContributionImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContributionImages to fetch.
     * 
    **/
    orderBy?: Enumerable<ContributionImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContributionImages.
     * 
    **/
    cursor?: ContributionImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContributionImages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContributionImages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContributionImages.
     * 
    **/
    distinct?: Enumerable<ContributionImageScalarFieldEnum>
  }


  /**
   * ContributionImage findMany
   */
  export type ContributionImageFindManyArgs = {
    /**
     * Select specific fields to fetch from the ContributionImage
     * 
    **/
    select?: ContributionImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContributionImageInclude | null
    /**
     * Filter, which ContributionImages to fetch.
     * 
    **/
    where?: ContributionImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContributionImages to fetch.
     * 
    **/
    orderBy?: Enumerable<ContributionImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContributionImages.
     * 
    **/
    cursor?: ContributionImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContributionImages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContributionImages.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ContributionImageScalarFieldEnum>
  }


  /**
   * ContributionImage create
   */
  export type ContributionImageCreateArgs = {
    /**
     * Select specific fields to fetch from the ContributionImage
     * 
    **/
    select?: ContributionImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContributionImageInclude | null
    /**
     * The data needed to create a ContributionImage.
     * 
    **/
    data: XOR<ContributionImageCreateInput, ContributionImageUncheckedCreateInput>
  }


  /**
   * ContributionImage createMany
   */
  export type ContributionImageCreateManyArgs = {
    data: Enumerable<ContributionImageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ContributionImage update
   */
  export type ContributionImageUpdateArgs = {
    /**
     * Select specific fields to fetch from the ContributionImage
     * 
    **/
    select?: ContributionImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContributionImageInclude | null
    /**
     * The data needed to update a ContributionImage.
     * 
    **/
    data: XOR<ContributionImageUpdateInput, ContributionImageUncheckedUpdateInput>
    /**
     * Choose, which ContributionImage to update.
     * 
    **/
    where: ContributionImageWhereUniqueInput
  }


  /**
   * ContributionImage updateMany
   */
  export type ContributionImageUpdateManyArgs = {
    data: XOR<ContributionImageUpdateManyMutationInput, ContributionImageUncheckedUpdateManyInput>
    where?: ContributionImageWhereInput
  }


  /**
   * ContributionImage upsert
   */
  export type ContributionImageUpsertArgs = {
    /**
     * Select specific fields to fetch from the ContributionImage
     * 
    **/
    select?: ContributionImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContributionImageInclude | null
    /**
     * The filter to search for the ContributionImage to update in case it exists.
     * 
    **/
    where: ContributionImageWhereUniqueInput
    /**
     * In case the ContributionImage found by the `where` argument doesn't exist, create a new ContributionImage with this data.
     * 
    **/
    create: XOR<ContributionImageCreateInput, ContributionImageUncheckedCreateInput>
    /**
     * In case the ContributionImage was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ContributionImageUpdateInput, ContributionImageUncheckedUpdateInput>
  }


  /**
   * ContributionImage delete
   */
  export type ContributionImageDeleteArgs = {
    /**
     * Select specific fields to fetch from the ContributionImage
     * 
    **/
    select?: ContributionImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContributionImageInclude | null
    /**
     * Filter which ContributionImage to delete.
     * 
    **/
    where: ContributionImageWhereUniqueInput
  }


  /**
   * ContributionImage deleteMany
   */
  export type ContributionImageDeleteManyArgs = {
    where?: ContributionImageWhereInput
  }


  /**
   * ContributionImage without action
   */
  export type ContributionImageArgs = {
    /**
     * Select specific fields to fetch from the ContributionImage
     * 
    **/
    select?: ContributionImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContributionImageInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserAccountScalarFieldEnum: {
    userId: 'userId',
    userName: 'userName',
    groupId: 'groupId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserAccountScalarFieldEnum = (typeof UserAccountScalarFieldEnum)[keyof typeof UserAccountScalarFieldEnum]


  export const GroupAccountScalarFieldEnum: {
    groupId: 'groupId',
    groupPass: 'groupPass',
    groupName: 'groupName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GroupAccountScalarFieldEnum = (typeof GroupAccountScalarFieldEnum)[keyof typeof GroupAccountScalarFieldEnum]


  export const ContributionInfoScalarFieldEnum: {
    contributionId: 'contributionId',
    groupId: 'groupId',
    userId: 'userId',
    materialName: 'materialName',
    category: 'category',
    composition1: 'composition1',
    compositionRatio1: 'compositionRatio1',
    composition2: 'composition2',
    compositionRatio2: 'compositionRatio2',
    composition3: 'composition3',
    compositionRatio3: 'compositionRatio3',
    fabricStructure: 'fabricStructure',
    color: 'color',
    pattern: 'pattern',
    processing: 'processing',
    unitPrice: 'unitPrice',
    supplier: 'supplier',
    comment: 'comment',
    isDeleted: 'isDeleted',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContributionInfoScalarFieldEnum = (typeof ContributionInfoScalarFieldEnum)[keyof typeof ContributionInfoScalarFieldEnum]


  export const ContributionImageScalarFieldEnum: {
    contributionId: 'contributionId',
    imageName1: 'imageName1',
    imageName2: 'imageName2',
    imageName3: 'imageName3',
    imageName4: 'imageName4',
    imageName5: 'imageName5',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContributionImageScalarFieldEnum = (typeof ContributionImageScalarFieldEnum)[keyof typeof ContributionImageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type UserAccountWhereInput = {
    AND?: Enumerable<UserAccountWhereInput>
    OR?: Enumerable<UserAccountWhereInput>
    NOT?: Enumerable<UserAccountWhereInput>
    userId?: StringFilter | string
    userName?: StringFilter | string
    groupId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    relationContributionInfo?: ContributionInfoListRelationFilter
  }

  export type UserAccountOrderByWithRelationInput = {
    userId?: SortOrder
    userName?: SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    relationContributionInfo?: ContributionInfoOrderByRelationAggregateInput
  }

  export type UserAccountWhereUniqueInput = {
    userId?: string
  }

  export type UserAccountOrderByWithAggregationInput = {
    userId?: SortOrder
    userName?: SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserAccountCountOrderByAggregateInput
    _max?: UserAccountMaxOrderByAggregateInput
    _min?: UserAccountMinOrderByAggregateInput
  }

  export type UserAccountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserAccountScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserAccountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserAccountScalarWhereWithAggregatesInput>
    userId?: StringWithAggregatesFilter | string
    userName?: StringWithAggregatesFilter | string
    groupId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type GroupAccountWhereInput = {
    AND?: Enumerable<GroupAccountWhereInput>
    OR?: Enumerable<GroupAccountWhereInput>
    NOT?: Enumerable<GroupAccountWhereInput>
    groupId?: StringFilter | string
    groupPass?: StringFilter | string
    groupName?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    relationContributionInfo?: ContributionInfoListRelationFilter
  }

  export type GroupAccountOrderByWithRelationInput = {
    groupId?: SortOrder
    groupPass?: SortOrder
    groupName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    relationContributionInfo?: ContributionInfoOrderByRelationAggregateInput
  }

  export type GroupAccountWhereUniqueInput = {
    groupId?: string
    groupName?: string
  }

  export type GroupAccountOrderByWithAggregationInput = {
    groupId?: SortOrder
    groupPass?: SortOrder
    groupName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GroupAccountCountOrderByAggregateInput
    _max?: GroupAccountMaxOrderByAggregateInput
    _min?: GroupAccountMinOrderByAggregateInput
  }

  export type GroupAccountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GroupAccountScalarWhereWithAggregatesInput>
    OR?: Enumerable<GroupAccountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GroupAccountScalarWhereWithAggregatesInput>
    groupId?: StringWithAggregatesFilter | string
    groupPass?: StringWithAggregatesFilter | string
    groupName?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ContributionInfoWhereInput = {
    AND?: Enumerable<ContributionInfoWhereInput>
    OR?: Enumerable<ContributionInfoWhereInput>
    NOT?: Enumerable<ContributionInfoWhereInput>
    contributionId?: IntFilter | number
    relationGroupId?: XOR<GroupAccountRelationFilter, GroupAccountWhereInput>
    groupId?: StringFilter | string
    relationUserId?: XOR<UserAccountRelationFilter, UserAccountWhereInput>
    userId?: StringFilter | string
    materialName?: StringFilter | string
    category?: StringFilter | string
    composition1?: StringNullableFilter | string | null
    compositionRatio1?: IntNullableFilter | number | null
    composition2?: StringNullableFilter | string | null
    compositionRatio2?: IntNullableFilter | number | null
    composition3?: StringNullableFilter | string | null
    compositionRatio3?: IntNullableFilter | number | null
    fabricStructure?: StringNullableFilter | string | null
    color?: StringNullableFilter | string | null
    pattern?: StringNullableFilter | string | null
    processing?: StringNullableFilter | string | null
    unitPrice?: IntNullableFilter | number | null
    supplier?: StringNullableFilter | string | null
    comment?: StringNullableFilter | string | null
    isDeleted?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    relationContributionImage?: XOR<ContributionImageRelationFilter, ContributionImageWhereInput> | null
  }

  export type ContributionInfoOrderByWithRelationInput = {
    contributionId?: SortOrder
    relationGroupId?: GroupAccountOrderByWithRelationInput
    groupId?: SortOrder
    relationUserId?: UserAccountOrderByWithRelationInput
    userId?: SortOrder
    materialName?: SortOrder
    category?: SortOrder
    composition1?: SortOrder
    compositionRatio1?: SortOrder
    composition2?: SortOrder
    compositionRatio2?: SortOrder
    composition3?: SortOrder
    compositionRatio3?: SortOrder
    fabricStructure?: SortOrder
    color?: SortOrder
    pattern?: SortOrder
    processing?: SortOrder
    unitPrice?: SortOrder
    supplier?: SortOrder
    comment?: SortOrder
    isDeleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    relationContributionImage?: ContributionImageOrderByWithRelationInput
  }

  export type ContributionInfoWhereUniqueInput = {
    contributionId?: number
  }

  export type ContributionInfoOrderByWithAggregationInput = {
    contributionId?: SortOrder
    groupId?: SortOrder
    userId?: SortOrder
    materialName?: SortOrder
    category?: SortOrder
    composition1?: SortOrder
    compositionRatio1?: SortOrder
    composition2?: SortOrder
    compositionRatio2?: SortOrder
    composition3?: SortOrder
    compositionRatio3?: SortOrder
    fabricStructure?: SortOrder
    color?: SortOrder
    pattern?: SortOrder
    processing?: SortOrder
    unitPrice?: SortOrder
    supplier?: SortOrder
    comment?: SortOrder
    isDeleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContributionInfoCountOrderByAggregateInput
    _avg?: ContributionInfoAvgOrderByAggregateInput
    _max?: ContributionInfoMaxOrderByAggregateInput
    _min?: ContributionInfoMinOrderByAggregateInput
    _sum?: ContributionInfoSumOrderByAggregateInput
  }

  export type ContributionInfoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ContributionInfoScalarWhereWithAggregatesInput>
    OR?: Enumerable<ContributionInfoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ContributionInfoScalarWhereWithAggregatesInput>
    contributionId?: IntWithAggregatesFilter | number
    groupId?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    materialName?: StringWithAggregatesFilter | string
    category?: StringWithAggregatesFilter | string
    composition1?: StringNullableWithAggregatesFilter | string | null
    compositionRatio1?: IntNullableWithAggregatesFilter | number | null
    composition2?: StringNullableWithAggregatesFilter | string | null
    compositionRatio2?: IntNullableWithAggregatesFilter | number | null
    composition3?: StringNullableWithAggregatesFilter | string | null
    compositionRatio3?: IntNullableWithAggregatesFilter | number | null
    fabricStructure?: StringNullableWithAggregatesFilter | string | null
    color?: StringNullableWithAggregatesFilter | string | null
    pattern?: StringNullableWithAggregatesFilter | string | null
    processing?: StringNullableWithAggregatesFilter | string | null
    unitPrice?: IntNullableWithAggregatesFilter | number | null
    supplier?: StringNullableWithAggregatesFilter | string | null
    comment?: StringNullableWithAggregatesFilter | string | null
    isDeleted?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ContributionImageWhereInput = {
    AND?: Enumerable<ContributionImageWhereInput>
    OR?: Enumerable<ContributionImageWhereInput>
    NOT?: Enumerable<ContributionImageWhereInput>
    relationContributionId?: XOR<ContributionInfoRelationFilter, ContributionInfoWhereInput>
    contributionId?: IntFilter | number
    imageName1?: StringFilter | string
    imageName2?: StringNullableFilter | string | null
    imageName3?: StringNullableFilter | string | null
    imageName4?: StringNullableFilter | string | null
    imageName5?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ContributionImageOrderByWithRelationInput = {
    relationContributionId?: ContributionInfoOrderByWithRelationInput
    contributionId?: SortOrder
    imageName1?: SortOrder
    imageName2?: SortOrder
    imageName3?: SortOrder
    imageName4?: SortOrder
    imageName5?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContributionImageWhereUniqueInput = {
    contributionId?: number
  }

  export type ContributionImageOrderByWithAggregationInput = {
    contributionId?: SortOrder
    imageName1?: SortOrder
    imageName2?: SortOrder
    imageName3?: SortOrder
    imageName4?: SortOrder
    imageName5?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContributionImageCountOrderByAggregateInput
    _avg?: ContributionImageAvgOrderByAggregateInput
    _max?: ContributionImageMaxOrderByAggregateInput
    _min?: ContributionImageMinOrderByAggregateInput
    _sum?: ContributionImageSumOrderByAggregateInput
  }

  export type ContributionImageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ContributionImageScalarWhereWithAggregatesInput>
    OR?: Enumerable<ContributionImageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ContributionImageScalarWhereWithAggregatesInput>
    contributionId?: IntWithAggregatesFilter | number
    imageName1?: StringWithAggregatesFilter | string
    imageName2?: StringNullableWithAggregatesFilter | string | null
    imageName3?: StringNullableWithAggregatesFilter | string | null
    imageName4?: StringNullableWithAggregatesFilter | string | null
    imageName5?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserAccountCreateInput = {
    userId: string
    userName: string
    groupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    relationContributionInfo?: ContributionInfoCreateNestedManyWithoutRelationUserIdInput
  }

  export type UserAccountUncheckedCreateInput = {
    userId: string
    userName: string
    groupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    relationContributionInfo?: ContributionInfoUncheckedCreateNestedManyWithoutRelationUserIdInput
  }

  export type UserAccountUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationContributionInfo?: ContributionInfoUpdateManyWithoutRelationUserIdInput
  }

  export type UserAccountUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationContributionInfo?: ContributionInfoUncheckedUpdateManyWithoutRelationUserIdInput
  }

  export type UserAccountCreateManyInput = {
    userId: string
    userName: string
    groupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAccountUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAccountUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupAccountCreateInput = {
    groupId: string
    groupPass: string
    groupName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    relationContributionInfo?: ContributionInfoCreateNestedManyWithoutRelationGroupIdInput
  }

  export type GroupAccountUncheckedCreateInput = {
    groupId: string
    groupPass: string
    groupName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    relationContributionInfo?: ContributionInfoUncheckedCreateNestedManyWithoutRelationGroupIdInput
  }

  export type GroupAccountUpdateInput = {
    groupId?: StringFieldUpdateOperationsInput | string
    groupPass?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationContributionInfo?: ContributionInfoUpdateManyWithoutRelationGroupIdInput
  }

  export type GroupAccountUncheckedUpdateInput = {
    groupId?: StringFieldUpdateOperationsInput | string
    groupPass?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationContributionInfo?: ContributionInfoUncheckedUpdateManyWithoutRelationGroupIdInput
  }

  export type GroupAccountCreateManyInput = {
    groupId: string
    groupPass: string
    groupName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupAccountUpdateManyMutationInput = {
    groupId?: StringFieldUpdateOperationsInput | string
    groupPass?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupAccountUncheckedUpdateManyInput = {
    groupId?: StringFieldUpdateOperationsInput | string
    groupPass?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContributionInfoCreateInput = {
    materialName: string
    category: string
    composition1?: string | null
    compositionRatio1?: number | null
    composition2?: string | null
    compositionRatio2?: number | null
    composition3?: string | null
    compositionRatio3?: number | null
    fabricStructure?: string | null
    color?: string | null
    pattern?: string | null
    processing?: string | null
    unitPrice?: number | null
    supplier?: string | null
    comment?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    relationGroupId: GroupAccountCreateNestedOneWithoutRelationContributionInfoInput
    relationUserId: UserAccountCreateNestedOneWithoutRelationContributionInfoInput
    relationContributionImage?: ContributionImageCreateNestedOneWithoutRelationContributionIdInput
  }

  export type ContributionInfoUncheckedCreateInput = {
    contributionId?: number
    groupId: string
    userId: string
    materialName: string
    category: string
    composition1?: string | null
    compositionRatio1?: number | null
    composition2?: string | null
    compositionRatio2?: number | null
    composition3?: string | null
    compositionRatio3?: number | null
    fabricStructure?: string | null
    color?: string | null
    pattern?: string | null
    processing?: string | null
    unitPrice?: number | null
    supplier?: string | null
    comment?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    relationContributionImage?: ContributionImageUncheckedCreateNestedOneWithoutRelationContributionIdInput
  }

  export type ContributionInfoUpdateInput = {
    materialName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    composition1?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio1?: NullableIntFieldUpdateOperationsInput | number | null
    composition2?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio2?: NullableIntFieldUpdateOperationsInput | number | null
    composition3?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio3?: NullableIntFieldUpdateOperationsInput | number | null
    fabricStructure?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    pattern?: NullableStringFieldUpdateOperationsInput | string | null
    processing?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationGroupId?: GroupAccountUpdateOneRequiredWithoutRelationContributionInfoInput
    relationUserId?: UserAccountUpdateOneRequiredWithoutRelationContributionInfoInput
    relationContributionImage?: ContributionImageUpdateOneWithoutRelationContributionIdInput
  }

  export type ContributionInfoUncheckedUpdateInput = {
    contributionId?: IntFieldUpdateOperationsInput | number
    groupId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    materialName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    composition1?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio1?: NullableIntFieldUpdateOperationsInput | number | null
    composition2?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio2?: NullableIntFieldUpdateOperationsInput | number | null
    composition3?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio3?: NullableIntFieldUpdateOperationsInput | number | null
    fabricStructure?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    pattern?: NullableStringFieldUpdateOperationsInput | string | null
    processing?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationContributionImage?: ContributionImageUncheckedUpdateOneWithoutRelationContributionIdInput
  }

  export type ContributionInfoCreateManyInput = {
    contributionId?: number
    groupId: string
    userId: string
    materialName: string
    category: string
    composition1?: string | null
    compositionRatio1?: number | null
    composition2?: string | null
    compositionRatio2?: number | null
    composition3?: string | null
    compositionRatio3?: number | null
    fabricStructure?: string | null
    color?: string | null
    pattern?: string | null
    processing?: string | null
    unitPrice?: number | null
    supplier?: string | null
    comment?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContributionInfoUpdateManyMutationInput = {
    materialName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    composition1?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio1?: NullableIntFieldUpdateOperationsInput | number | null
    composition2?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio2?: NullableIntFieldUpdateOperationsInput | number | null
    composition3?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio3?: NullableIntFieldUpdateOperationsInput | number | null
    fabricStructure?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    pattern?: NullableStringFieldUpdateOperationsInput | string | null
    processing?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContributionInfoUncheckedUpdateManyInput = {
    contributionId?: IntFieldUpdateOperationsInput | number
    groupId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    materialName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    composition1?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio1?: NullableIntFieldUpdateOperationsInput | number | null
    composition2?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio2?: NullableIntFieldUpdateOperationsInput | number | null
    composition3?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio3?: NullableIntFieldUpdateOperationsInput | number | null
    fabricStructure?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    pattern?: NullableStringFieldUpdateOperationsInput | string | null
    processing?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContributionImageCreateInput = {
    imageName1: string
    imageName2?: string | null
    imageName3?: string | null
    imageName4?: string | null
    imageName5?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    relationContributionId: ContributionInfoCreateNestedOneWithoutRelationContributionImageInput
  }

  export type ContributionImageUncheckedCreateInput = {
    contributionId: number
    imageName1: string
    imageName2?: string | null
    imageName3?: string | null
    imageName4?: string | null
    imageName5?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContributionImageUpdateInput = {
    imageName1?: StringFieldUpdateOperationsInput | string
    imageName2?: NullableStringFieldUpdateOperationsInput | string | null
    imageName3?: NullableStringFieldUpdateOperationsInput | string | null
    imageName4?: NullableStringFieldUpdateOperationsInput | string | null
    imageName5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationContributionId?: ContributionInfoUpdateOneRequiredWithoutRelationContributionImageInput
  }

  export type ContributionImageUncheckedUpdateInput = {
    contributionId?: IntFieldUpdateOperationsInput | number
    imageName1?: StringFieldUpdateOperationsInput | string
    imageName2?: NullableStringFieldUpdateOperationsInput | string | null
    imageName3?: NullableStringFieldUpdateOperationsInput | string | null
    imageName4?: NullableStringFieldUpdateOperationsInput | string | null
    imageName5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContributionImageCreateManyInput = {
    contributionId: number
    imageName1: string
    imageName2?: string | null
    imageName3?: string | null
    imageName4?: string | null
    imageName5?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContributionImageUpdateManyMutationInput = {
    imageName1?: StringFieldUpdateOperationsInput | string
    imageName2?: NullableStringFieldUpdateOperationsInput | string | null
    imageName3?: NullableStringFieldUpdateOperationsInput | string | null
    imageName4?: NullableStringFieldUpdateOperationsInput | string | null
    imageName5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContributionImageUncheckedUpdateManyInput = {
    contributionId?: IntFieldUpdateOperationsInput | number
    imageName1?: StringFieldUpdateOperationsInput | string
    imageName2?: NullableStringFieldUpdateOperationsInput | string | null
    imageName3?: NullableStringFieldUpdateOperationsInput | string | null
    imageName4?: NullableStringFieldUpdateOperationsInput | string | null
    imageName5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ContributionInfoListRelationFilter = {
    every?: ContributionInfoWhereInput
    some?: ContributionInfoWhereInput
    none?: ContributionInfoWhereInput
  }

  export type ContributionInfoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserAccountCountOrderByAggregateInput = {
    userId?: SortOrder
    userName?: SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAccountMaxOrderByAggregateInput = {
    userId?: SortOrder
    userName?: SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAccountMinOrderByAggregateInput = {
    userId?: SortOrder
    userName?: SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type GroupAccountCountOrderByAggregateInput = {
    groupId?: SortOrder
    groupPass?: SortOrder
    groupName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupAccountMaxOrderByAggregateInput = {
    groupId?: SortOrder
    groupPass?: SortOrder
    groupName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupAccountMinOrderByAggregateInput = {
    groupId?: SortOrder
    groupPass?: SortOrder
    groupName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type GroupAccountRelationFilter = {
    is?: GroupAccountWhereInput
    isNot?: GroupAccountWhereInput
  }

  export type UserAccountRelationFilter = {
    is?: UserAccountWhereInput
    isNot?: UserAccountWhereInput
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type ContributionImageRelationFilter = {
    is?: ContributionImageWhereInput | null
    isNot?: ContributionImageWhereInput | null
  }

  export type ContributionInfoCountOrderByAggregateInput = {
    contributionId?: SortOrder
    groupId?: SortOrder
    userId?: SortOrder
    materialName?: SortOrder
    category?: SortOrder
    composition1?: SortOrder
    compositionRatio1?: SortOrder
    composition2?: SortOrder
    compositionRatio2?: SortOrder
    composition3?: SortOrder
    compositionRatio3?: SortOrder
    fabricStructure?: SortOrder
    color?: SortOrder
    pattern?: SortOrder
    processing?: SortOrder
    unitPrice?: SortOrder
    supplier?: SortOrder
    comment?: SortOrder
    isDeleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContributionInfoAvgOrderByAggregateInput = {
    contributionId?: SortOrder
    compositionRatio1?: SortOrder
    compositionRatio2?: SortOrder
    compositionRatio3?: SortOrder
    unitPrice?: SortOrder
  }

  export type ContributionInfoMaxOrderByAggregateInput = {
    contributionId?: SortOrder
    groupId?: SortOrder
    userId?: SortOrder
    materialName?: SortOrder
    category?: SortOrder
    composition1?: SortOrder
    compositionRatio1?: SortOrder
    composition2?: SortOrder
    compositionRatio2?: SortOrder
    composition3?: SortOrder
    compositionRatio3?: SortOrder
    fabricStructure?: SortOrder
    color?: SortOrder
    pattern?: SortOrder
    processing?: SortOrder
    unitPrice?: SortOrder
    supplier?: SortOrder
    comment?: SortOrder
    isDeleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContributionInfoMinOrderByAggregateInput = {
    contributionId?: SortOrder
    groupId?: SortOrder
    userId?: SortOrder
    materialName?: SortOrder
    category?: SortOrder
    composition1?: SortOrder
    compositionRatio1?: SortOrder
    composition2?: SortOrder
    compositionRatio2?: SortOrder
    composition3?: SortOrder
    compositionRatio3?: SortOrder
    fabricStructure?: SortOrder
    color?: SortOrder
    pattern?: SortOrder
    processing?: SortOrder
    unitPrice?: SortOrder
    supplier?: SortOrder
    comment?: SortOrder
    isDeleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContributionInfoSumOrderByAggregateInput = {
    contributionId?: SortOrder
    compositionRatio1?: SortOrder
    compositionRatio2?: SortOrder
    compositionRatio3?: SortOrder
    unitPrice?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type ContributionInfoRelationFilter = {
    is?: ContributionInfoWhereInput
    isNot?: ContributionInfoWhereInput
  }

  export type ContributionImageCountOrderByAggregateInput = {
    contributionId?: SortOrder
    imageName1?: SortOrder
    imageName2?: SortOrder
    imageName3?: SortOrder
    imageName4?: SortOrder
    imageName5?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContributionImageAvgOrderByAggregateInput = {
    contributionId?: SortOrder
  }

  export type ContributionImageMaxOrderByAggregateInput = {
    contributionId?: SortOrder
    imageName1?: SortOrder
    imageName2?: SortOrder
    imageName3?: SortOrder
    imageName4?: SortOrder
    imageName5?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContributionImageMinOrderByAggregateInput = {
    contributionId?: SortOrder
    imageName1?: SortOrder
    imageName2?: SortOrder
    imageName3?: SortOrder
    imageName4?: SortOrder
    imageName5?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContributionImageSumOrderByAggregateInput = {
    contributionId?: SortOrder
  }

  export type ContributionInfoCreateNestedManyWithoutRelationUserIdInput = {
    create?: XOR<Enumerable<ContributionInfoCreateWithoutRelationUserIdInput>, Enumerable<ContributionInfoUncheckedCreateWithoutRelationUserIdInput>>
    connectOrCreate?: Enumerable<ContributionInfoCreateOrConnectWithoutRelationUserIdInput>
    createMany?: ContributionInfoCreateManyRelationUserIdInputEnvelope
    connect?: Enumerable<ContributionInfoWhereUniqueInput>
  }

  export type ContributionInfoUncheckedCreateNestedManyWithoutRelationUserIdInput = {
    create?: XOR<Enumerable<ContributionInfoCreateWithoutRelationUserIdInput>, Enumerable<ContributionInfoUncheckedCreateWithoutRelationUserIdInput>>
    connectOrCreate?: Enumerable<ContributionInfoCreateOrConnectWithoutRelationUserIdInput>
    createMany?: ContributionInfoCreateManyRelationUserIdInputEnvelope
    connect?: Enumerable<ContributionInfoWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ContributionInfoUpdateManyWithoutRelationUserIdInput = {
    create?: XOR<Enumerable<ContributionInfoCreateWithoutRelationUserIdInput>, Enumerable<ContributionInfoUncheckedCreateWithoutRelationUserIdInput>>
    connectOrCreate?: Enumerable<ContributionInfoCreateOrConnectWithoutRelationUserIdInput>
    upsert?: Enumerable<ContributionInfoUpsertWithWhereUniqueWithoutRelationUserIdInput>
    createMany?: ContributionInfoCreateManyRelationUserIdInputEnvelope
    set?: Enumerable<ContributionInfoWhereUniqueInput>
    disconnect?: Enumerable<ContributionInfoWhereUniqueInput>
    delete?: Enumerable<ContributionInfoWhereUniqueInput>
    connect?: Enumerable<ContributionInfoWhereUniqueInput>
    update?: Enumerable<ContributionInfoUpdateWithWhereUniqueWithoutRelationUserIdInput>
    updateMany?: Enumerable<ContributionInfoUpdateManyWithWhereWithoutRelationUserIdInput>
    deleteMany?: Enumerable<ContributionInfoScalarWhereInput>
  }

  export type ContributionInfoUncheckedUpdateManyWithoutRelationUserIdInput = {
    create?: XOR<Enumerable<ContributionInfoCreateWithoutRelationUserIdInput>, Enumerable<ContributionInfoUncheckedCreateWithoutRelationUserIdInput>>
    connectOrCreate?: Enumerable<ContributionInfoCreateOrConnectWithoutRelationUserIdInput>
    upsert?: Enumerable<ContributionInfoUpsertWithWhereUniqueWithoutRelationUserIdInput>
    createMany?: ContributionInfoCreateManyRelationUserIdInputEnvelope
    set?: Enumerable<ContributionInfoWhereUniqueInput>
    disconnect?: Enumerable<ContributionInfoWhereUniqueInput>
    delete?: Enumerable<ContributionInfoWhereUniqueInput>
    connect?: Enumerable<ContributionInfoWhereUniqueInput>
    update?: Enumerable<ContributionInfoUpdateWithWhereUniqueWithoutRelationUserIdInput>
    updateMany?: Enumerable<ContributionInfoUpdateManyWithWhereWithoutRelationUserIdInput>
    deleteMany?: Enumerable<ContributionInfoScalarWhereInput>
  }

  export type ContributionInfoCreateNestedManyWithoutRelationGroupIdInput = {
    create?: XOR<Enumerable<ContributionInfoCreateWithoutRelationGroupIdInput>, Enumerable<ContributionInfoUncheckedCreateWithoutRelationGroupIdInput>>
    connectOrCreate?: Enumerable<ContributionInfoCreateOrConnectWithoutRelationGroupIdInput>
    createMany?: ContributionInfoCreateManyRelationGroupIdInputEnvelope
    connect?: Enumerable<ContributionInfoWhereUniqueInput>
  }

  export type ContributionInfoUncheckedCreateNestedManyWithoutRelationGroupIdInput = {
    create?: XOR<Enumerable<ContributionInfoCreateWithoutRelationGroupIdInput>, Enumerable<ContributionInfoUncheckedCreateWithoutRelationGroupIdInput>>
    connectOrCreate?: Enumerable<ContributionInfoCreateOrConnectWithoutRelationGroupIdInput>
    createMany?: ContributionInfoCreateManyRelationGroupIdInputEnvelope
    connect?: Enumerable<ContributionInfoWhereUniqueInput>
  }

  export type ContributionInfoUpdateManyWithoutRelationGroupIdInput = {
    create?: XOR<Enumerable<ContributionInfoCreateWithoutRelationGroupIdInput>, Enumerable<ContributionInfoUncheckedCreateWithoutRelationGroupIdInput>>
    connectOrCreate?: Enumerable<ContributionInfoCreateOrConnectWithoutRelationGroupIdInput>
    upsert?: Enumerable<ContributionInfoUpsertWithWhereUniqueWithoutRelationGroupIdInput>
    createMany?: ContributionInfoCreateManyRelationGroupIdInputEnvelope
    set?: Enumerable<ContributionInfoWhereUniqueInput>
    disconnect?: Enumerable<ContributionInfoWhereUniqueInput>
    delete?: Enumerable<ContributionInfoWhereUniqueInput>
    connect?: Enumerable<ContributionInfoWhereUniqueInput>
    update?: Enumerable<ContributionInfoUpdateWithWhereUniqueWithoutRelationGroupIdInput>
    updateMany?: Enumerable<ContributionInfoUpdateManyWithWhereWithoutRelationGroupIdInput>
    deleteMany?: Enumerable<ContributionInfoScalarWhereInput>
  }

  export type ContributionInfoUncheckedUpdateManyWithoutRelationGroupIdInput = {
    create?: XOR<Enumerable<ContributionInfoCreateWithoutRelationGroupIdInput>, Enumerable<ContributionInfoUncheckedCreateWithoutRelationGroupIdInput>>
    connectOrCreate?: Enumerable<ContributionInfoCreateOrConnectWithoutRelationGroupIdInput>
    upsert?: Enumerable<ContributionInfoUpsertWithWhereUniqueWithoutRelationGroupIdInput>
    createMany?: ContributionInfoCreateManyRelationGroupIdInputEnvelope
    set?: Enumerable<ContributionInfoWhereUniqueInput>
    disconnect?: Enumerable<ContributionInfoWhereUniqueInput>
    delete?: Enumerable<ContributionInfoWhereUniqueInput>
    connect?: Enumerable<ContributionInfoWhereUniqueInput>
    update?: Enumerable<ContributionInfoUpdateWithWhereUniqueWithoutRelationGroupIdInput>
    updateMany?: Enumerable<ContributionInfoUpdateManyWithWhereWithoutRelationGroupIdInput>
    deleteMany?: Enumerable<ContributionInfoScalarWhereInput>
  }

  export type GroupAccountCreateNestedOneWithoutRelationContributionInfoInput = {
    create?: XOR<GroupAccountCreateWithoutRelationContributionInfoInput, GroupAccountUncheckedCreateWithoutRelationContributionInfoInput>
    connectOrCreate?: GroupAccountCreateOrConnectWithoutRelationContributionInfoInput
    connect?: GroupAccountWhereUniqueInput
  }

  export type UserAccountCreateNestedOneWithoutRelationContributionInfoInput = {
    create?: XOR<UserAccountCreateWithoutRelationContributionInfoInput, UserAccountUncheckedCreateWithoutRelationContributionInfoInput>
    connectOrCreate?: UserAccountCreateOrConnectWithoutRelationContributionInfoInput
    connect?: UserAccountWhereUniqueInput
  }

  export type ContributionImageCreateNestedOneWithoutRelationContributionIdInput = {
    create?: XOR<ContributionImageCreateWithoutRelationContributionIdInput, ContributionImageUncheckedCreateWithoutRelationContributionIdInput>
    connectOrCreate?: ContributionImageCreateOrConnectWithoutRelationContributionIdInput
    connect?: ContributionImageWhereUniqueInput
  }

  export type ContributionImageUncheckedCreateNestedOneWithoutRelationContributionIdInput = {
    create?: XOR<ContributionImageCreateWithoutRelationContributionIdInput, ContributionImageUncheckedCreateWithoutRelationContributionIdInput>
    connectOrCreate?: ContributionImageCreateOrConnectWithoutRelationContributionIdInput
    connect?: ContributionImageWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type GroupAccountUpdateOneRequiredWithoutRelationContributionInfoInput = {
    create?: XOR<GroupAccountCreateWithoutRelationContributionInfoInput, GroupAccountUncheckedCreateWithoutRelationContributionInfoInput>
    connectOrCreate?: GroupAccountCreateOrConnectWithoutRelationContributionInfoInput
    upsert?: GroupAccountUpsertWithoutRelationContributionInfoInput
    connect?: GroupAccountWhereUniqueInput
    update?: XOR<GroupAccountUpdateWithoutRelationContributionInfoInput, GroupAccountUncheckedUpdateWithoutRelationContributionInfoInput>
  }

  export type UserAccountUpdateOneRequiredWithoutRelationContributionInfoInput = {
    create?: XOR<UserAccountCreateWithoutRelationContributionInfoInput, UserAccountUncheckedCreateWithoutRelationContributionInfoInput>
    connectOrCreate?: UserAccountCreateOrConnectWithoutRelationContributionInfoInput
    upsert?: UserAccountUpsertWithoutRelationContributionInfoInput
    connect?: UserAccountWhereUniqueInput
    update?: XOR<UserAccountUpdateWithoutRelationContributionInfoInput, UserAccountUncheckedUpdateWithoutRelationContributionInfoInput>
  }

  export type ContributionImageUpdateOneWithoutRelationContributionIdInput = {
    create?: XOR<ContributionImageCreateWithoutRelationContributionIdInput, ContributionImageUncheckedCreateWithoutRelationContributionIdInput>
    connectOrCreate?: ContributionImageCreateOrConnectWithoutRelationContributionIdInput
    upsert?: ContributionImageUpsertWithoutRelationContributionIdInput
    disconnect?: boolean
    delete?: boolean
    connect?: ContributionImageWhereUniqueInput
    update?: XOR<ContributionImageUpdateWithoutRelationContributionIdInput, ContributionImageUncheckedUpdateWithoutRelationContributionIdInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ContributionImageUncheckedUpdateOneWithoutRelationContributionIdInput = {
    create?: XOR<ContributionImageCreateWithoutRelationContributionIdInput, ContributionImageUncheckedCreateWithoutRelationContributionIdInput>
    connectOrCreate?: ContributionImageCreateOrConnectWithoutRelationContributionIdInput
    upsert?: ContributionImageUpsertWithoutRelationContributionIdInput
    disconnect?: boolean
    delete?: boolean
    connect?: ContributionImageWhereUniqueInput
    update?: XOR<ContributionImageUpdateWithoutRelationContributionIdInput, ContributionImageUncheckedUpdateWithoutRelationContributionIdInput>
  }

  export type ContributionInfoCreateNestedOneWithoutRelationContributionImageInput = {
    create?: XOR<ContributionInfoCreateWithoutRelationContributionImageInput, ContributionInfoUncheckedCreateWithoutRelationContributionImageInput>
    connectOrCreate?: ContributionInfoCreateOrConnectWithoutRelationContributionImageInput
    connect?: ContributionInfoWhereUniqueInput
  }

  export type ContributionInfoUpdateOneRequiredWithoutRelationContributionImageInput = {
    create?: XOR<ContributionInfoCreateWithoutRelationContributionImageInput, ContributionInfoUncheckedCreateWithoutRelationContributionImageInput>
    connectOrCreate?: ContributionInfoCreateOrConnectWithoutRelationContributionImageInput
    upsert?: ContributionInfoUpsertWithoutRelationContributionImageInput
    connect?: ContributionInfoWhereUniqueInput
    update?: XOR<ContributionInfoUpdateWithoutRelationContributionImageInput, ContributionInfoUncheckedUpdateWithoutRelationContributionImageInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type ContributionInfoCreateWithoutRelationUserIdInput = {
    materialName: string
    category: string
    composition1?: string | null
    compositionRatio1?: number | null
    composition2?: string | null
    compositionRatio2?: number | null
    composition3?: string | null
    compositionRatio3?: number | null
    fabricStructure?: string | null
    color?: string | null
    pattern?: string | null
    processing?: string | null
    unitPrice?: number | null
    supplier?: string | null
    comment?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    relationGroupId: GroupAccountCreateNestedOneWithoutRelationContributionInfoInput
    relationContributionImage?: ContributionImageCreateNestedOneWithoutRelationContributionIdInput
  }

  export type ContributionInfoUncheckedCreateWithoutRelationUserIdInput = {
    contributionId?: number
    groupId: string
    materialName: string
    category: string
    composition1?: string | null
    compositionRatio1?: number | null
    composition2?: string | null
    compositionRatio2?: number | null
    composition3?: string | null
    compositionRatio3?: number | null
    fabricStructure?: string | null
    color?: string | null
    pattern?: string | null
    processing?: string | null
    unitPrice?: number | null
    supplier?: string | null
    comment?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    relationContributionImage?: ContributionImageUncheckedCreateNestedOneWithoutRelationContributionIdInput
  }

  export type ContributionInfoCreateOrConnectWithoutRelationUserIdInput = {
    where: ContributionInfoWhereUniqueInput
    create: XOR<ContributionInfoCreateWithoutRelationUserIdInput, ContributionInfoUncheckedCreateWithoutRelationUserIdInput>
  }

  export type ContributionInfoCreateManyRelationUserIdInputEnvelope = {
    data: Enumerable<ContributionInfoCreateManyRelationUserIdInput>
    skipDuplicates?: boolean
  }

  export type ContributionInfoUpsertWithWhereUniqueWithoutRelationUserIdInput = {
    where: ContributionInfoWhereUniqueInput
    update: XOR<ContributionInfoUpdateWithoutRelationUserIdInput, ContributionInfoUncheckedUpdateWithoutRelationUserIdInput>
    create: XOR<ContributionInfoCreateWithoutRelationUserIdInput, ContributionInfoUncheckedCreateWithoutRelationUserIdInput>
  }

  export type ContributionInfoUpdateWithWhereUniqueWithoutRelationUserIdInput = {
    where: ContributionInfoWhereUniqueInput
    data: XOR<ContributionInfoUpdateWithoutRelationUserIdInput, ContributionInfoUncheckedUpdateWithoutRelationUserIdInput>
  }

  export type ContributionInfoUpdateManyWithWhereWithoutRelationUserIdInput = {
    where: ContributionInfoScalarWhereInput
    data: XOR<ContributionInfoUpdateManyMutationInput, ContributionInfoUncheckedUpdateManyWithoutRelationContributionInfoInput>
  }

  export type ContributionInfoScalarWhereInput = {
    AND?: Enumerable<ContributionInfoScalarWhereInput>
    OR?: Enumerable<ContributionInfoScalarWhereInput>
    NOT?: Enumerable<ContributionInfoScalarWhereInput>
    contributionId?: IntFilter | number
    groupId?: StringFilter | string
    userId?: StringFilter | string
    materialName?: StringFilter | string
    category?: StringFilter | string
    composition1?: StringNullableFilter | string | null
    compositionRatio1?: IntNullableFilter | number | null
    composition2?: StringNullableFilter | string | null
    compositionRatio2?: IntNullableFilter | number | null
    composition3?: StringNullableFilter | string | null
    compositionRatio3?: IntNullableFilter | number | null
    fabricStructure?: StringNullableFilter | string | null
    color?: StringNullableFilter | string | null
    pattern?: StringNullableFilter | string | null
    processing?: StringNullableFilter | string | null
    unitPrice?: IntNullableFilter | number | null
    supplier?: StringNullableFilter | string | null
    comment?: StringNullableFilter | string | null
    isDeleted?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ContributionInfoCreateWithoutRelationGroupIdInput = {
    materialName: string
    category: string
    composition1?: string | null
    compositionRatio1?: number | null
    composition2?: string | null
    compositionRatio2?: number | null
    composition3?: string | null
    compositionRatio3?: number | null
    fabricStructure?: string | null
    color?: string | null
    pattern?: string | null
    processing?: string | null
    unitPrice?: number | null
    supplier?: string | null
    comment?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    relationUserId: UserAccountCreateNestedOneWithoutRelationContributionInfoInput
    relationContributionImage?: ContributionImageCreateNestedOneWithoutRelationContributionIdInput
  }

  export type ContributionInfoUncheckedCreateWithoutRelationGroupIdInput = {
    contributionId?: number
    userId: string
    materialName: string
    category: string
    composition1?: string | null
    compositionRatio1?: number | null
    composition2?: string | null
    compositionRatio2?: number | null
    composition3?: string | null
    compositionRatio3?: number | null
    fabricStructure?: string | null
    color?: string | null
    pattern?: string | null
    processing?: string | null
    unitPrice?: number | null
    supplier?: string | null
    comment?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    relationContributionImage?: ContributionImageUncheckedCreateNestedOneWithoutRelationContributionIdInput
  }

  export type ContributionInfoCreateOrConnectWithoutRelationGroupIdInput = {
    where: ContributionInfoWhereUniqueInput
    create: XOR<ContributionInfoCreateWithoutRelationGroupIdInput, ContributionInfoUncheckedCreateWithoutRelationGroupIdInput>
  }

  export type ContributionInfoCreateManyRelationGroupIdInputEnvelope = {
    data: Enumerable<ContributionInfoCreateManyRelationGroupIdInput>
    skipDuplicates?: boolean
  }

  export type ContributionInfoUpsertWithWhereUniqueWithoutRelationGroupIdInput = {
    where: ContributionInfoWhereUniqueInput
    update: XOR<ContributionInfoUpdateWithoutRelationGroupIdInput, ContributionInfoUncheckedUpdateWithoutRelationGroupIdInput>
    create: XOR<ContributionInfoCreateWithoutRelationGroupIdInput, ContributionInfoUncheckedCreateWithoutRelationGroupIdInput>
  }

  export type ContributionInfoUpdateWithWhereUniqueWithoutRelationGroupIdInput = {
    where: ContributionInfoWhereUniqueInput
    data: XOR<ContributionInfoUpdateWithoutRelationGroupIdInput, ContributionInfoUncheckedUpdateWithoutRelationGroupIdInput>
  }

  export type ContributionInfoUpdateManyWithWhereWithoutRelationGroupIdInput = {
    where: ContributionInfoScalarWhereInput
    data: XOR<ContributionInfoUpdateManyMutationInput, ContributionInfoUncheckedUpdateManyWithoutRelationContributionInfoInput>
  }

  export type GroupAccountCreateWithoutRelationContributionInfoInput = {
    groupId: string
    groupPass: string
    groupName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupAccountUncheckedCreateWithoutRelationContributionInfoInput = {
    groupId: string
    groupPass: string
    groupName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupAccountCreateOrConnectWithoutRelationContributionInfoInput = {
    where: GroupAccountWhereUniqueInput
    create: XOR<GroupAccountCreateWithoutRelationContributionInfoInput, GroupAccountUncheckedCreateWithoutRelationContributionInfoInput>
  }

  export type UserAccountCreateWithoutRelationContributionInfoInput = {
    userId: string
    userName: string
    groupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAccountUncheckedCreateWithoutRelationContributionInfoInput = {
    userId: string
    userName: string
    groupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAccountCreateOrConnectWithoutRelationContributionInfoInput = {
    where: UserAccountWhereUniqueInput
    create: XOR<UserAccountCreateWithoutRelationContributionInfoInput, UserAccountUncheckedCreateWithoutRelationContributionInfoInput>
  }

  export type ContributionImageCreateWithoutRelationContributionIdInput = {
    imageName1: string
    imageName2?: string | null
    imageName3?: string | null
    imageName4?: string | null
    imageName5?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContributionImageUncheckedCreateWithoutRelationContributionIdInput = {
    imageName1: string
    imageName2?: string | null
    imageName3?: string | null
    imageName4?: string | null
    imageName5?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContributionImageCreateOrConnectWithoutRelationContributionIdInput = {
    where: ContributionImageWhereUniqueInput
    create: XOR<ContributionImageCreateWithoutRelationContributionIdInput, ContributionImageUncheckedCreateWithoutRelationContributionIdInput>
  }

  export type GroupAccountUpsertWithoutRelationContributionInfoInput = {
    update: XOR<GroupAccountUpdateWithoutRelationContributionInfoInput, GroupAccountUncheckedUpdateWithoutRelationContributionInfoInput>
    create: XOR<GroupAccountCreateWithoutRelationContributionInfoInput, GroupAccountUncheckedCreateWithoutRelationContributionInfoInput>
  }

  export type GroupAccountUpdateWithoutRelationContributionInfoInput = {
    groupId?: StringFieldUpdateOperationsInput | string
    groupPass?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupAccountUncheckedUpdateWithoutRelationContributionInfoInput = {
    groupId?: StringFieldUpdateOperationsInput | string
    groupPass?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAccountUpsertWithoutRelationContributionInfoInput = {
    update: XOR<UserAccountUpdateWithoutRelationContributionInfoInput, UserAccountUncheckedUpdateWithoutRelationContributionInfoInput>
    create: XOR<UserAccountCreateWithoutRelationContributionInfoInput, UserAccountUncheckedCreateWithoutRelationContributionInfoInput>
  }

  export type UserAccountUpdateWithoutRelationContributionInfoInput = {
    userId?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAccountUncheckedUpdateWithoutRelationContributionInfoInput = {
    userId?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    groupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContributionImageUpsertWithoutRelationContributionIdInput = {
    update: XOR<ContributionImageUpdateWithoutRelationContributionIdInput, ContributionImageUncheckedUpdateWithoutRelationContributionIdInput>
    create: XOR<ContributionImageCreateWithoutRelationContributionIdInput, ContributionImageUncheckedCreateWithoutRelationContributionIdInput>
  }

  export type ContributionImageUpdateWithoutRelationContributionIdInput = {
    imageName1?: StringFieldUpdateOperationsInput | string
    imageName2?: NullableStringFieldUpdateOperationsInput | string | null
    imageName3?: NullableStringFieldUpdateOperationsInput | string | null
    imageName4?: NullableStringFieldUpdateOperationsInput | string | null
    imageName5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContributionImageUncheckedUpdateWithoutRelationContributionIdInput = {
    imageName1?: StringFieldUpdateOperationsInput | string
    imageName2?: NullableStringFieldUpdateOperationsInput | string | null
    imageName3?: NullableStringFieldUpdateOperationsInput | string | null
    imageName4?: NullableStringFieldUpdateOperationsInput | string | null
    imageName5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContributionInfoCreateWithoutRelationContributionImageInput = {
    materialName: string
    category: string
    composition1?: string | null
    compositionRatio1?: number | null
    composition2?: string | null
    compositionRatio2?: number | null
    composition3?: string | null
    compositionRatio3?: number | null
    fabricStructure?: string | null
    color?: string | null
    pattern?: string | null
    processing?: string | null
    unitPrice?: number | null
    supplier?: string | null
    comment?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    relationGroupId: GroupAccountCreateNestedOneWithoutRelationContributionInfoInput
    relationUserId: UserAccountCreateNestedOneWithoutRelationContributionInfoInput
  }

  export type ContributionInfoUncheckedCreateWithoutRelationContributionImageInput = {
    contributionId?: number
    groupId: string
    userId: string
    materialName: string
    category: string
    composition1?: string | null
    compositionRatio1?: number | null
    composition2?: string | null
    compositionRatio2?: number | null
    composition3?: string | null
    compositionRatio3?: number | null
    fabricStructure?: string | null
    color?: string | null
    pattern?: string | null
    processing?: string | null
    unitPrice?: number | null
    supplier?: string | null
    comment?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContributionInfoCreateOrConnectWithoutRelationContributionImageInput = {
    where: ContributionInfoWhereUniqueInput
    create: XOR<ContributionInfoCreateWithoutRelationContributionImageInput, ContributionInfoUncheckedCreateWithoutRelationContributionImageInput>
  }

  export type ContributionInfoUpsertWithoutRelationContributionImageInput = {
    update: XOR<ContributionInfoUpdateWithoutRelationContributionImageInput, ContributionInfoUncheckedUpdateWithoutRelationContributionImageInput>
    create: XOR<ContributionInfoCreateWithoutRelationContributionImageInput, ContributionInfoUncheckedCreateWithoutRelationContributionImageInput>
  }

  export type ContributionInfoUpdateWithoutRelationContributionImageInput = {
    materialName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    composition1?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio1?: NullableIntFieldUpdateOperationsInput | number | null
    composition2?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio2?: NullableIntFieldUpdateOperationsInput | number | null
    composition3?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio3?: NullableIntFieldUpdateOperationsInput | number | null
    fabricStructure?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    pattern?: NullableStringFieldUpdateOperationsInput | string | null
    processing?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationGroupId?: GroupAccountUpdateOneRequiredWithoutRelationContributionInfoInput
    relationUserId?: UserAccountUpdateOneRequiredWithoutRelationContributionInfoInput
  }

  export type ContributionInfoUncheckedUpdateWithoutRelationContributionImageInput = {
    contributionId?: IntFieldUpdateOperationsInput | number
    groupId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    materialName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    composition1?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio1?: NullableIntFieldUpdateOperationsInput | number | null
    composition2?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio2?: NullableIntFieldUpdateOperationsInput | number | null
    composition3?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio3?: NullableIntFieldUpdateOperationsInput | number | null
    fabricStructure?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    pattern?: NullableStringFieldUpdateOperationsInput | string | null
    processing?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContributionInfoCreateManyRelationUserIdInput = {
    contributionId?: number
    groupId: string
    materialName: string
    category: string
    composition1?: string | null
    compositionRatio1?: number | null
    composition2?: string | null
    compositionRatio2?: number | null
    composition3?: string | null
    compositionRatio3?: number | null
    fabricStructure?: string | null
    color?: string | null
    pattern?: string | null
    processing?: string | null
    unitPrice?: number | null
    supplier?: string | null
    comment?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContributionInfoUpdateWithoutRelationUserIdInput = {
    materialName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    composition1?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio1?: NullableIntFieldUpdateOperationsInput | number | null
    composition2?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio2?: NullableIntFieldUpdateOperationsInput | number | null
    composition3?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio3?: NullableIntFieldUpdateOperationsInput | number | null
    fabricStructure?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    pattern?: NullableStringFieldUpdateOperationsInput | string | null
    processing?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationGroupId?: GroupAccountUpdateOneRequiredWithoutRelationContributionInfoInput
    relationContributionImage?: ContributionImageUpdateOneWithoutRelationContributionIdInput
  }

  export type ContributionInfoUncheckedUpdateWithoutRelationUserIdInput = {
    contributionId?: IntFieldUpdateOperationsInput | number
    groupId?: StringFieldUpdateOperationsInput | string
    materialName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    composition1?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio1?: NullableIntFieldUpdateOperationsInput | number | null
    composition2?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio2?: NullableIntFieldUpdateOperationsInput | number | null
    composition3?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio3?: NullableIntFieldUpdateOperationsInput | number | null
    fabricStructure?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    pattern?: NullableStringFieldUpdateOperationsInput | string | null
    processing?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationContributionImage?: ContributionImageUncheckedUpdateOneWithoutRelationContributionIdInput
  }

  export type ContributionInfoUncheckedUpdateManyWithoutRelationContributionInfoInput = {
    contributionId?: IntFieldUpdateOperationsInput | number
    groupId?: StringFieldUpdateOperationsInput | string
    materialName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    composition1?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio1?: NullableIntFieldUpdateOperationsInput | number | null
    composition2?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio2?: NullableIntFieldUpdateOperationsInput | number | null
    composition3?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio3?: NullableIntFieldUpdateOperationsInput | number | null
    fabricStructure?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    pattern?: NullableStringFieldUpdateOperationsInput | string | null
    processing?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContributionInfoCreateManyRelationGroupIdInput = {
    contributionId?: number
    userId: string
    materialName: string
    category: string
    composition1?: string | null
    compositionRatio1?: number | null
    composition2?: string | null
    compositionRatio2?: number | null
    composition3?: string | null
    compositionRatio3?: number | null
    fabricStructure?: string | null
    color?: string | null
    pattern?: string | null
    processing?: string | null
    unitPrice?: number | null
    supplier?: string | null
    comment?: string | null
    isDeleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContributionInfoUpdateWithoutRelationGroupIdInput = {
    materialName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    composition1?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio1?: NullableIntFieldUpdateOperationsInput | number | null
    composition2?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio2?: NullableIntFieldUpdateOperationsInput | number | null
    composition3?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio3?: NullableIntFieldUpdateOperationsInput | number | null
    fabricStructure?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    pattern?: NullableStringFieldUpdateOperationsInput | string | null
    processing?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationUserId?: UserAccountUpdateOneRequiredWithoutRelationContributionInfoInput
    relationContributionImage?: ContributionImageUpdateOneWithoutRelationContributionIdInput
  }

  export type ContributionInfoUncheckedUpdateWithoutRelationGroupIdInput = {
    contributionId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    materialName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    composition1?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio1?: NullableIntFieldUpdateOperationsInput | number | null
    composition2?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio2?: NullableIntFieldUpdateOperationsInput | number | null
    composition3?: NullableStringFieldUpdateOperationsInput | string | null
    compositionRatio3?: NullableIntFieldUpdateOperationsInput | number | null
    fabricStructure?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    pattern?: NullableStringFieldUpdateOperationsInput | string | null
    processing?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationContributionImage?: ContributionImageUncheckedUpdateOneWithoutRelationContributionIdInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}